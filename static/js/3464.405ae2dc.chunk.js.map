{"version":3,"file":"static/js/3464.405ae2dc.chunk.js","mappings":"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","sources":["../node_modules/@paperxyz/embedded-wallet-service-sdk/src/interfaces/Auth.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/interfaces/EmbeddedWallets/EmbeddedWallets.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/constants/settings.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/utils/Storage/LocalStorage.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/utils/iFrameCommunication/IframeCommunicator.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/utils/iFrameCommunication/EmbeddedWalletIframeCommunicator.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/Auth/AbstractLogin.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/Auth/AwsManagedLogin.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/Auth/UserManagedLogin.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/Auth/index.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/EmbeddedWallets/GaslessTransactionMaker.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/EmbeddedWallets/Signer.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/EmbeddedWallets/EmbeddedWallet.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/Paper.ts","../node_modules/@paperxyz/sdk-common-utilities/src/constants/blockchain.ts","../node_modules/@paperxyz/sdk-common-utilities/src/constants/settings.ts"],"sourcesContent":["import type {\n  AuthDetails,\n  InitializedUser,\n  SetUpWalletRpcReturnType,\n} from \"./EmbeddedWallets/EmbeddedWallets\";\n\nexport enum RecoveryShareManagement {\n  USER_MANAGED = \"USER_MANAGED\",\n  AWS_MANAGED = \"AWS_MANAGED\",\n}\n\nexport type AdvancedOptions<T extends RecoveryShareManagement> = {\n  // This is a hack to allow us to assign default value to recoveryShareManagement\n  recoveryShareManagement: RecoveryShareManagement | T;\n};\n\nexport enum AuthProvider {\n  PAPER_EMAIL_OTP = \"PaperEmailOTP\",\n  GOOGLE = \"Google\",\n  TWITTER = \"Twitter\",\n  COGNITO = \"Cognito\",\n  AUTH0 = \"Auth0\",\n  CUSTOM_JWT = \"CustomJWT\",\n}\n\nexport type GetSocialLoginClientIdReturnType = {\n  clientId: string;\n};\n\nexport type GetHeadlessLoginLinkReturnType = {\n  loginLink: string;\n};\n\n// TODO: Clean up tech debt of random type Objects\n// E.g. StoredTokenType is really not used anywhere but it exists as this object for legacy reason\nexport type StoredTokenType = {\n  jwtToken: string;\n  authProvider: AuthProvider;\n  authDetails: AuthDetails;\n  developerClientId: string;\n};\n\nexport type AuthStoredTokenWithCookieReturnType = {\n  storedToken: StoredTokenType & {\n    cookieString: string;\n    shouldStoreCookieString: boolean;\n    isNewUser: boolean;\n  };\n};\nexport type AuthAndWalletRpcReturnType = AuthStoredTokenWithCookieReturnType & {\n  walletDetails: SetUpWalletRpcReturnType;\n};\n\nexport type AuthLoginReturnType = { user: InitializedUser };\n","import type {\n  Chain,\n  CustomizationOptionsType,\n} from \"@paperxyz/sdk-common-utilities\";\nimport type { EmbeddedWallet } from \"../../lib/EmbeddedWallets/EmbeddedWallet\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport type {\n  AdvancedOptions,\n  AuthAndWalletRpcReturnType,\n  RecoveryShareManagement,\n} from \"../Auth\";\n\n// Class constructor types\n// types for class constructors still a little messy right now.\n// Open to PRs from whoever sees this and knows of a cleaner way to handle things\nexport type ClientIdConstructorType = { clientId: string };\nexport type PaperConstructorType<T extends RecoveryShareManagement> =\n  ClientIdConstructorType & {\n    chain: Chain;\n    onAuthSuccess?: (authResult: AuthAndWalletRpcReturnType) => void;\n    advancedOptions?: Partial<AdvancedOptions<T>>;\n    styles?: CustomizationOptionsType;\n  };\nexport type ClientIdWithQuerierType = ClientIdConstructorType & {\n  querier: EmbeddedWalletIframeCommunicator<any>;\n};\nexport type ClientIdWithQuerierAndChainType = ClientIdWithQuerierType & {\n  chain: Chain;\n};\n\n// Auth Types\nexport type AuthDetails = {\n  email?: string;\n  userWalletId: string;\n  recoveryCode?: string;\n};\n\nexport type InitializedUser = {\n  status: UserStatus.LOGGED_IN_WALLET_INITIALIZED;\n  wallet: EmbeddedWallet;\n  walletAddress: string;\n  authDetails: AuthDetails;\n};\n\n// Embedded Wallet Types\nexport enum UserStatus {\n  LOGGED_OUT = \"Logged Out\",\n  LOGGED_IN_WALLET_INITIALIZED = \"Logged In, Wallet Initialized\",\n}\nexport enum UserWalletStatus {\n  LOGGED_OUT = \"Logged Out\",\n  LOGGED_IN_WALLET_UNINITIALIZED = \"Logged In, Wallet Uninitialized\",\n  LOGGED_IN_NEW_DEVICE = \"Logged In, New Device\",\n  LOGGED_IN_WALLET_INITIALIZED = \"Logged In, Wallet Initialized\",\n}\n\nexport type WalletAddressObjectType = {\n  walletAddress: string;\n};\n\nexport type SetUpWalletRpcReturnType = WalletAddressObjectType & {\n  deviceShareStored: string;\n  isIframeStorageEnabled: boolean;\n};\n\nexport type SendEmailOtpReturnType = {\n  recoveryShareManagement: RecoveryShareManagement;\n  isNewUser: boolean;\n  isNewDevice: boolean;\n};\nexport type LogoutReturnType = { success: boolean };\nexport type GetAuthDetailsReturnType = { authDetails?: AuthDetails };\n\n// ! Types seem repetitive, but the name should identify which goes where\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method iframe call\nexport type GetUserWalletStatusRpcReturnType =\n  | {\n      status: UserWalletStatus.LOGGED_OUT;\n      user: undefined;\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED;\n      user: { authDetails: AuthDetails };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_NEW_DEVICE;\n      user: { authDetails: AuthDetails; walletAddress: string };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED;\n      user: Omit<InitializedUser, \"wallet\" | \"status\">;\n    };\n\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method\nexport type GetUserWalletStatusFnReturnType =\n  | {\n      status: UserWalletStatus.LOGGED_OUT;\n      user: undefined;\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED;\n      user: { authDetails: AuthDetails };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_NEW_DEVICE;\n      user: { authDetails: AuthDetails; walletAddress: string };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED;\n      user: Omit<InitializedUser, \"status\">;\n    };\n\n// This is returned from the getUser method in PaperEmbeddedWalletSdk\nexport type GetUser =\n  | {\n      status: UserStatus.LOGGED_OUT;\n    }\n  | InitializedUser;\n","export const EMBEDDED_WALLET_PATH = \"/sdk/2022-08-12/embedded-wallet\";\nexport const HEADLESS_GOOGLE_OAUTH_ROUTE = `${EMBEDDED_WALLET_PATH}/auth/headless-google-login-managed`;\n\nexport const WALLET_USER_DETAILS_LOCAL_STORAGE_NAME = (clientId: string) =>\n  `paperEwsWalletUserDetails-${clientId}`;\nexport const WALLET_USER_ID_LOCAL_STORAGE_NAME = (clientId: string) =>\n  `paperEwsWalletUserId-${clientId}`;\nconst AUTH_TOKEN_LOCAL_STORAGE_PREFIX = \"walletToken\";\nexport const AUTH_TOKEN_LOCAL_STORAGE_NAME = (clientId: string) => {\n  return `${AUTH_TOKEN_LOCAL_STORAGE_PREFIX}-${clientId}`;\n};\nconst DEVICE_SHARE_LOCAL_STORAGE_PREFIX = \"a\";\nexport const DEVICE_SHARE_LOCAL_STORAGE_NAME = (\n  clientId: string,\n  userId: string,\n) => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}-${userId}`;\nexport const DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED = (clientId: string) =>\n  `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}`;\n","import {\n  AUTH_TOKEN_LOCAL_STORAGE_NAME,\n  DEVICE_SHARE_LOCAL_STORAGE_NAME,\n  WALLET_USER_ID_LOCAL_STORAGE_NAME,\n} from \"../../constants/settings\";\n\nconst data = new Map<string, string>();\n\nexport class LocalStorage {\n  protected isSupported: boolean;\n  protected clientId: string;\n  constructor({ clientId }: { clientId: string }) {\n    this.isSupported = typeof window !== \"undefined\" && !!window.localStorage;\n    this.clientId = clientId;\n  }\n\n  protected async getItem(key: string): Promise<string | null> {\n    if (this.isSupported) {\n      return window.localStorage.getItem(key);\n    } else {\n      return data.get(key) ?? null;\n    }\n  }\n\n  protected async setItem(key: string, value: string): Promise<void> {\n    if (this.isSupported) {\n      return window.localStorage.setItem(key, value);\n    } else {\n      data.set(key, value);\n    }\n  }\n\n  protected async removeItem(key: string): Promise<boolean> {\n    const item = await this.getItem(key);\n    if (this.isSupported && item) {\n      window.localStorage.removeItem(key);\n      return true;\n    }\n    return false;\n  }\n\n  async saveAuthCookie(cookie: string): Promise<void> {\n    await this.setItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId), cookie);\n  }\n  async getAuthCookie(): Promise<string | null> {\n    return this.getItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async removeAuthCookie(): Promise<boolean> {\n    return this.removeItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n\n  async saveDeviceShare(share: string, userId: string): Promise<void> {\n    await this.saveWalletUserId(userId);\n    await this.setItem(\n      DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      share,\n    );\n  }\n  async getDeviceShare(): Promise<string | null> {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.getItem(\n        DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      );\n    }\n    return null;\n  }\n  async removeDeviceShare(): Promise<boolean> {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.removeItem(\n        DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      );\n    }\n    return false;\n  }\n\n  async getWalletUserId(): Promise<string | null> {\n    return this.getItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async saveWalletUserId(userId: string): Promise<void> {\n    await this.setItem(\n      WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId),\n      userId,\n    );\n  }\n  async removeWalletUserId(): Promise<boolean> {\n    return this.removeItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n}\n","import type { MessageType, StyleObject } from \"@paperxyz/sdk-common-utilities\";\nimport { getPaperOriginUrl } from \"@paperxyz/sdk-common-utilities\";\nimport { EMBEDDED_WALLET_PATH } from \"../../constants/settings\";\n\ntype IFrameCommunicatorProps = {\n  link: string;\n  iframeId: string;\n  container?: HTMLElement;\n  iframeStyles?: StyleObject;\n  onIframeInitialize?: () => void;\n};\n\nfunction sleep(seconds: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, seconds * 1000);\n  });\n}\n\nconst iframeBaseStyle = {\n  height: \"100%\",\n  width: \"100%\",\n  border: \"none\",\n  backgroundColor: \"transparent\",\n  colorScheme: \"light\",\n  position: \"fixed\",\n  top: \"0px\",\n  right: \"0px\",\n  zIndex: \"2147483646\",\n  display: \"none\",\n};\n\n// Global var to help track iframe state\nconst isIframeLoaded = new Map<string, boolean>();\n\nexport class IframeCommunicator<T extends { [key: string]: any }> {\n  private iframe: HTMLIFrameElement;\n  private POLLING_INTERVAL_SECONDS = 1.4;\n  private POST_LOAD_BUFFER_SECONDS = 1;\n\n  constructor({\n    link,\n    iframeId,\n    container = document.body,\n    iframeStyles,\n    onIframeInitialize,\n  }: IFrameCommunicatorProps) {\n    // Creating the IFrame element for communication\n    let iframe = document.getElementById(iframeId) as HTMLIFrameElement | null;\n    const hrefLink = new URL(link);\n    const sdkVersion = process.env.SDK_VERSION;\n    if (!sdkVersion) {\n      throw new Error(\"Missing SDK_VERSION env var\");\n    }\n    hrefLink.searchParams.set(\"sdkVersion\", sdkVersion);\n    if (!iframe || iframe.src != hrefLink.href) {\n      // ! Do not update the hrefLink here or it'll cause multiple re-renders\n      if (!iframe) {\n        iframe = document.createElement(\"iframe\");\n        const mergedIframeStyles = {\n          ...iframeBaseStyle,\n          ...iframeStyles,\n        };\n        Object.assign(iframe.style, mergedIframeStyles);\n        iframe.setAttribute(\"id\", iframeId);\n        iframe.setAttribute(\"fetchpriority\", \"high\");\n        container.appendChild(iframe);\n      }\n      iframe.src = hrefLink.href;\n      iframe.setAttribute(\"data-version\", sdkVersion);\n      iframe.onload = this.onIframeLoadHandler(\n        iframe,\n        this.POST_LOAD_BUFFER_SECONDS,\n        onIframeInitialize,\n      );\n    }\n    this.iframe = iframe;\n  }\n\n  protected async onIframeLoadedInitVariables(): Promise<Record<string, any>> {\n    return {};\n  }\n\n  onIframeLoadHandler(\n    iframe: HTMLIFrameElement,\n    prePostMessageSleepInSeconds: number,\n    onIframeInitialize?: () => void,\n  ) {\n    return async () => {\n      const promise = new Promise<boolean>(async (res, rej) => {\n        const channel = new MessageChannel();\n        channel.port1.onmessage = (event: MessageEvent<MessageType<void>>) => {\n          const { data } = event;\n          channel.port1.close();\n          if (!data.success) {\n            return rej(new Error(data.error));\n          }\n          isIframeLoaded.set(iframe.src, true);\n          if (onIframeInitialize) {\n            onIframeInitialize();\n          }\n          return res(true);\n        };\n        // iFrame takes a bit of time after loading to be ready for message receiving\n        // This is hacky\n        await sleep(prePostMessageSleepInSeconds);\n        const INIT_IFRAME_EVENT = \"initIframe\";\n        iframe?.contentWindow?.postMessage(\n          // ? We initialise the iframe with a bunch\n          // of useful information so that we don't have to pass it\n          // through in each of the future call. This would be where we do it.\n          {\n            eventType: INIT_IFRAME_EVENT,\n            data: await this.onIframeLoadedInitVariables(),\n          },\n          `${getPaperOriginUrl()}${EMBEDDED_WALLET_PATH}`,\n          [channel.port2],\n        );\n      });\n      await promise;\n    };\n  }\n\n  async call<ReturnData>({\n    procedureName,\n    params,\n    showIframe = false,\n    injectRecoveryCode = { isInjectRecoveryCode: false },\n  }: {\n    procedureName: keyof T;\n    params: T[keyof T];\n    showIframe?: boolean;\n    injectRecoveryCode?: {\n      getRecoveryCode?: (userWalletId: string) => Promise<string | undefined>;\n      isInjectRecoveryCode: boolean;\n    };\n  }) {\n    while (!isIframeLoaded.get(this.iframe.src)) {\n      await sleep(this.POLLING_INTERVAL_SECONDS);\n    }\n    if (showIframe) {\n      this.iframe.style.display = \"block\";\n      // magic number to let the display render before performing the animation of the modal in\n      await sleep(0.005);\n    }\n    const promise = new Promise<ReturnData>((res, rej) => {\n      if (injectRecoveryCode.isInjectRecoveryCode) {\n        const injectRecoveryCodeListener = async (\n          e: MessageEvent<{ type: string; userWalletId: string }>,\n        ) => {\n          if (\n            e.origin !== getPaperOriginUrl() ||\n            e.data.type !== \"paper_getRecoveryCode\" ||\n            typeof e.data.userWalletId !== \"string\"\n          ) {\n            return;\n          }\n          const recoveryCode = await injectRecoveryCode.getRecoveryCode?.(\n            e.data.userWalletId,\n          );\n          this.iframe.contentWindow?.postMessage(\n            { type: \"paper_getRecoveryCode_response\", recoveryCode },\n            getPaperOriginUrl(),\n          );\n          window.removeEventListener(\"message\", injectRecoveryCodeListener);\n        };\n        window.addEventListener(\"message\", injectRecoveryCodeListener);\n      }\n\n      const channel = new MessageChannel();\n      channel.port1.onmessage = async (\n        event: MessageEvent<MessageType<ReturnData>>,\n      ) => {\n        const { data } = event;\n        channel.port1.close();\n        if (showIframe) {\n          // magic number to let modal fade out before hiding it\n          await sleep(0.1);\n          this.iframe.style.display = \"none\";\n        }\n        if (!data.success) {\n          rej(new Error(data.error));\n        } else {\n          res(data.data);\n        }\n      };\n      this.iframe.contentWindow?.postMessage(\n        { eventType: procedureName, data: params },\n        `${getPaperOriginUrl()}${EMBEDDED_WALLET_PATH}`,\n        [channel.port2],\n      );\n    });\n    return promise;\n  }\n\n  /**\n   * This has to be called by any iframe that will be removed from the DOM.\n   * Use to make sure that we reset the global loaded state of the particular iframe.src\n   */\n  destroy() {\n    isIframeLoaded.delete(this.iframe.src);\n  }\n}\n","import type { CustomizationOptionsType } from \"@paperxyz/sdk-common-utilities\";\nimport { getPaperOriginUrl } from \"@paperxyz/sdk-common-utilities\";\nimport { EMBEDDED_WALLET_PATH } from \"../../constants/settings\";\nimport { LocalStorage } from \"../Storage/LocalStorage\";\nimport { IframeCommunicator } from \"./IframeCommunicator\";\n\nexport class EmbeddedWalletIframeCommunicator<\n  T extends { [key: string]: any },\n> extends IframeCommunicator<T> {\n  clientId: string;\n  constructor({\n    clientId,\n    customizationOptions,\n  }: {\n    clientId: string;\n    customizationOptions?: CustomizationOptionsType;\n  }) {\n    super({\n      iframeId: EMBEDDED_WALLET_IFRAME_ID,\n      link: createEmbeddedWalletIframeLink({\n        clientId,\n        path: EMBEDDED_WALLET_PATH,\n        queryParams: customizationOptions,\n      }).href,\n      container: document.body,\n    });\n    this.clientId = clientId;\n  }\n\n  override async onIframeLoadedInitVariables() {\n    const localStorage = new LocalStorage({\n      clientId: this.clientId,\n    });\n\n    return {\n      authCookie: await localStorage.getAuthCookie(),\n      deviceShareStored: await localStorage.getDeviceShare(),\n      walletUserId: await localStorage.getWalletUserId(),\n      clientId: this.clientId,\n    };\n  }\n}\n\n// This is the URL and ID tag of the iFrame that we communicate with\nexport function createEmbeddedWalletIframeLink({\n  clientId,\n  path,\n  queryParams,\n}: {\n  clientId: string;\n  path: string;\n  queryParams?: { [key: string]: string | number };\n}) {\n  const embeddedWalletUrl = new URL(path, getPaperOriginUrl());\n  if (queryParams) {\n    for (const queryKey of Object.keys(queryParams)) {\n      embeddedWalletUrl.searchParams.set(\n        queryKey,\n        queryParams[queryKey]?.toString() || \"\",\n      );\n    }\n  }\n  embeddedWalletUrl.searchParams.set(\"clientId\", clientId);\n  return embeddedWalletUrl;\n}\nexport const EMBEDDED_WALLET_IFRAME_ID = \"paper-embedded-wallet-iframe\";\n","import type {\n  AuthAndWalletRpcReturnType,\n  AuthLoginReturnType,\n  RecoveryShareManagement,\n} from \"../../interfaces/Auth\";\nimport type {\n  ClientIdWithQuerierType,\n  SendEmailOtpReturnType,\n} from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\ntype LoginQuerierTypes = {\n  loginWithPaperModal:\n    | undefined\n    | { email: string; recoveryCode?: string }\n    | { recoveryShareManagement: RecoveryShareManagement }\n    | { email: string };\n  sendPaperEmailLoginOtp: {\n    email: string;\n    recoveryShareManagement?: RecoveryShareManagement;\n  };\n  verifyPaperEmailLoginOtp:\n    | {\n        email: string;\n        otp: string;\n        recoveryCode?: string;\n      }\n    | {\n        email: string;\n        otp: string;\n        recoveryShareManagement: RecoveryShareManagement;\n      };\n  injectDeveloperClientId: void;\n  getHeadlessGoogleLoginLink: void;\n  loginWithGoogle: void;\n};\n\nexport abstract class AbstractLogin<\n  MODAL = void,\n  EMAIL_MODAL extends { email: string } = { email: string },\n  EMAIL_VERIFICATION extends { email: string; otp: string } = {\n    email: string;\n    otp: string;\n  },\n> {\n  protected LoginQuerier: EmbeddedWalletIframeCommunicator<LoginQuerierTypes>;\n  protected preLogin;\n  protected postLogin: (\n    authResults: AuthAndWalletRpcReturnType,\n  ) => Promise<AuthLoginReturnType>;\n  protected clientId: string;\n  /**\n   * Used to manage the user's auth states. This should not be instantiated directly.\n   * Call {@link PaperEmbeddedWalletSdk.auth} instead.\n   *\n   * Authentication settings can be managed via the [authentication settings dashboard](https://withpaper.com/dashboard/embedded-wallets/auth-settings)\n   */\n  constructor({\n    querier,\n    preLogin,\n    postLogin,\n    clientId,\n  }: ClientIdWithQuerierType & {\n    preLogin: () => Promise<void>;\n    postLogin: (\n      authDetails: AuthAndWalletRpcReturnType,\n    ) => Promise<AuthLoginReturnType>;\n  }) {\n    this.LoginQuerier = querier;\n    this.preLogin = preLogin;\n    this.postLogin = postLogin;\n    this.clientId = clientId;\n  }\n\n  abstract loginWithPaperModal(args?: MODAL): Promise<AuthLoginReturnType>;\n  abstract loginWithPaperEmailOtp(\n    args: EMAIL_MODAL,\n  ): Promise<AuthLoginReturnType>;\n\n  abstract loginWithGoogle(args?: {\n    openedWindow?: Window | null;\n    closeOpenedWindow?: (openedWindow: Window) => void;\n  }): Promise<AuthLoginReturnType>;\n\n  async sendPaperEmailLoginOtp({\n    email,\n    recoveryShareManagement,\n  }: LoginQuerierTypes[\"sendPaperEmailLoginOtp\"]): Promise<SendEmailOtpReturnType> {\n    await this.preLogin();\n    const {\n      isNewUser,\n      isNewDevice,\n      recoveryShareManagement: userRecoveryShareManagement,\n    } = await this.LoginQuerier.call<SendEmailOtpReturnType>({\n      procedureName: \"sendPaperEmailLoginOtp\",\n      params: { email, recoveryShareManagement },\n    });\n    return {\n      isNewUser,\n      isNewDevice,\n      recoveryShareManagement: userRecoveryShareManagement,\n    };\n  }\n\n  abstract verifyPaperEmailLoginOtp(\n    args: EMAIL_VERIFICATION,\n  ): Promise<AuthLoginReturnType>;\n}\n","import { getPaperOriginUrl } from \"@paperxyz/sdk-common-utilities\";\nimport type {\n  AuthAndWalletRpcReturnType,\n  AuthLoginReturnType,\n  GetHeadlessLoginLinkReturnType,\n} from \"../../interfaces/Auth\";\nimport { RecoveryShareManagement } from \"../../interfaces/Auth\";\nimport { AbstractLogin } from \"./AbstractLogin\";\n\nexport class AwsManagedLogin extends AbstractLogin<\n  void,\n  { email: string },\n  { email: string; otp: string }\n> {\n  override async loginWithPaperModal(): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    const result = await this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithPaperModal\",\n      params: { recoveryShareManagement: RecoveryShareManagement.AWS_MANAGED },\n      showIframe: true,\n      injectRecoveryCode: {\n        isInjectRecoveryCode: true,\n      },\n    });\n    return this.postLogin(result);\n  }\n\n  private async getGoogleLoginUrl(): Promise<GetHeadlessLoginLinkReturnType> {\n    const result = await this.LoginQuerier.call<GetHeadlessLoginLinkReturnType>(\n      {\n        procedureName: \"getHeadlessGoogleLoginLink\",\n        params: undefined,\n      },\n    );\n    return result;\n  }\n\n  private closeWindow = ({\n    isWindowOpenedByFn,\n    win,\n    closeOpenedWindow,\n  }: {\n    win?: Window | null;\n    isWindowOpenedByFn: boolean;\n    closeOpenedWindow?: (openedWindow: Window) => void;\n  }) => {\n    if (isWindowOpenedByFn) {\n      win?.close();\n    } else {\n      if (win && closeOpenedWindow) {\n        closeOpenedWindow(win);\n      } else if (win) {\n        win.close();\n      }\n    }\n  };\n\n  override async loginWithGoogle(args?: {\n    openedWindow?: Window | null;\n    closeOpenedWindow?: (openedWindow: Window) => void;\n  }): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    let win = args?.openedWindow;\n    let isWindowOpenedByFn = false;\n    if (!win) {\n      win = window.open(\"\", \"Login\", \"width=350, height=500\");\n      isWindowOpenedByFn = true;\n    }\n    if (!win) {\n      throw new Error(\"Something went wrong opening pop-up\");\n    }\n    await this.preLogin();\n    // fetch the url to open the login window from iframe\n    const { loginLink } = await this.getGoogleLoginUrl();\n\n    win.location.href = loginLink;\n\n    // listen to result from the login window\n    const result = await new Promise<AuthAndWalletRpcReturnType>(\n      (resolve, reject) => {\n        // detect when the user closes the login window\n        const pollTimer = window.setInterval(async () => {\n          if (!win) {\n            return;\n          }\n          if (win.closed) {\n            clearInterval(pollTimer);\n            window.removeEventListener(\"message\", messageListener);\n            reject(new Error(\"User closed login window\"));\n          }\n        }, 1000);\n\n        const messageListener = async (\n          event: MessageEvent<{\n            eventType: string;\n            authResult?: AuthAndWalletRpcReturnType;\n            error?: string;\n          }>,\n        ) => {\n          if (event.origin !== getPaperOriginUrl()) {\n            return;\n          }\n          if (typeof event.data !== \"object\") {\n            reject(new Error(\"Invalid event data\"));\n            return;\n          }\n\n          switch (event.data.eventType) {\n            case \"userLoginSuccess\": {\n              window.removeEventListener(\"message\", messageListener);\n              clearInterval(pollTimer);\n              this.closeWindow({\n                isWindowOpenedByFn,\n                win,\n                closeOpenedWindow: args?.closeOpenedWindow,\n              });\n              if (event.data.authResult) {\n                resolve(event.data.authResult);\n              }\n              break;\n            }\n            case \"userLoginFailed\": {\n              window.removeEventListener(\"message\", messageListener);\n              clearInterval(pollTimer);\n              this.closeWindow({\n                isWindowOpenedByFn,\n                win,\n                closeOpenedWindow: args?.closeOpenedWindow,\n              });\n              reject(new Error(event.data.error));\n              break;\n            }\n            case \"injectDeveloperClientId\": {\n              win?.postMessage(\n                {\n                  eventType: \"injectDeveloperClientIdResult\",\n                  developerClientId: this.clientId,\n                },\n                getPaperOriginUrl(),\n              );\n              break;\n            }\n          }\n        };\n        window.addEventListener(\"message\", messageListener);\n      },\n    );\n\n    return this.postLogin({\n      storedToken: { ...result.storedToken, shouldStoreCookieString: true },\n      walletDetails: { ...result.walletDetails, isIframeStorageEnabled: false },\n    });\n  }\n\n  override async loginWithPaperEmailOtp({\n    email,\n  }: {\n    email: string;\n  }): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    const result = await this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithPaperModal\",\n      params: {\n        email,\n        recoveryShareManagement: RecoveryShareManagement.AWS_MANAGED,\n      },\n      showIframe: true,\n      injectRecoveryCode: {\n        isInjectRecoveryCode: true,\n      },\n    });\n    return this.postLogin(result);\n  }\n  override async verifyPaperEmailLoginOtp({\n    email,\n    otp,\n  }: {\n    email: string;\n    otp: string;\n  }): Promise<AuthLoginReturnType> {\n    const result = await this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"verifyPaperEmailLoginOtp\",\n      params: {\n        email,\n        otp,\n        recoveryShareManagement: RecoveryShareManagement.AWS_MANAGED,\n      },\n      injectRecoveryCode: {\n        isInjectRecoveryCode: true,\n      },\n    });\n    return this.postLogin(result);\n  }\n}\n","import type {\n  AuthAndWalletRpcReturnType,\n  AuthLoginReturnType,\n} from \"../../interfaces/Auth\";\nimport { AbstractLogin } from \"./AbstractLogin\";\nexport class UserManagedLogin extends AbstractLogin<\n  {\n    getRecoveryCode: (userWalletId: string) => Promise<string | undefined>;\n  },\n  { email: string; recoveryCode?: string },\n  { email: string; otp: string; recoveryCode?: string }\n> {\n  override async loginWithPaperModal(args?: {\n    getRecoveryCode: (userWalletId: string) => Promise<string | undefined>;\n  }): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    const result = await this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithPaperModal\",\n      params: undefined,\n      showIframe: true,\n      injectRecoveryCode: {\n        isInjectRecoveryCode: true,\n        getRecoveryCode: args?.getRecoveryCode,\n      },\n    });\n    return this.postLogin(result);\n  }\n\n  override async loginWithGoogle(args?: {\n    openedWindow?: Window | null;\n    closeOpenedWindow?: (openedWindow: Window) => void;\n  }): Promise<AuthLoginReturnType> {\n    throw new Error(\n      \"loginWithGoogle is not yet supported in the RecoveryShareManagement.USER_MANAGED flow. Please use RecoveryShareManagement.AWS_MANAGED instead.\",\n    );\n  }\n\n  override async loginWithPaperEmailOtp({\n    email,\n    recoveryCode,\n  }: {\n    email: string;\n    recoveryCode?: string | undefined;\n  }): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    const result = await this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithPaperModal\",\n      params: { email, recoveryCode },\n      showIframe: true,\n      injectRecoveryCode: {\n        isInjectRecoveryCode: true,\n      },\n    });\n    return this.postLogin(result);\n  }\n  override async verifyPaperEmailLoginOtp({\n    email,\n    otp,\n    recoveryCode,\n  }: {\n    email: string;\n    otp: string;\n    recoveryCode?: string | undefined;\n  }): Promise<AuthLoginReturnType> {\n    const result = await this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"verifyPaperEmailLoginOtp\",\n      params: { email, otp, recoveryCode },\n      injectRecoveryCode: {\n        isInjectRecoveryCode: true,\n      },\n    });\n    return this.postLogin(result);\n  }\n}\n","import type {\n  AdvancedOptions,\n  AuthAndWalletRpcReturnType,\n  AuthLoginReturnType,\n  AuthProvider,\n} from \"../../interfaces/Auth\";\nimport { RecoveryShareManagement } from \"../../interfaces/Auth\";\nimport type {\n  ClientIdWithQuerierType,\n  LogoutReturnType,\n  SendEmailOtpReturnType,\n} from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport { LocalStorage } from \"../../utils/Storage/LocalStorage\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport { AwsManagedLogin } from \"./AwsManagedLogin\";\nimport { UserManagedLogin } from \"./UserManagedLogin\";\n\nexport type AuthQuerierTypes = {\n  initIframe: {\n    clientId: string;\n    authCookie: string;\n    walletUserId: string;\n    deviceShareStored: string;\n  };\n  loginWithJwtAuthCallback: {\n    token: string;\n    authProvider: AuthProvider;\n    recoveryCode?: string;\n  };\n  logout: void;\n  sendPaperEmailLoginOtp: { email: string };\n};\n\nexport class Auth<\n  T extends RecoveryShareManagement = RecoveryShareManagement.USER_MANAGED,\n> {\n  protected advancedOptions: AdvancedOptions<T>;\n  protected clientId: string;\n  protected AuthQuerier: EmbeddedWalletIframeCommunicator<AuthQuerierTypes>;\n  protected localStorage: LocalStorage;\n  protected onAuthSuccess: (\n    authResults: AuthAndWalletRpcReturnType,\n  ) => Promise<AuthLoginReturnType>;\n  public userManagedLogin: UserManagedLogin;\n  public awsManagedLogin: AwsManagedLogin;\n\n  /**\n   * Used to manage the user's auth states. This should not be instantiated directly.\n   * Call {@link PaperEmbeddedWalletSdk.auth} instead.\n   *\n   * Authentication settings can be managed via the [authentication settings dashboard](https://withpaper.com/dashboard/embedded-wallets/auth-settings)\n   * @param {string} params.clientId the clientId associated with the various authentication settings\n   */\n  constructor({\n    clientId,\n    advancedOptions,\n    querier,\n    onAuthSuccess,\n  }: ClientIdWithQuerierType & {\n    advancedOptions?: Partial<AdvancedOptions<T>>;\n    onAuthSuccess: (\n      authDetails: AuthAndWalletRpcReturnType,\n    ) => Promise<AuthLoginReturnType>;\n  }) {\n    this.clientId = clientId;\n    this.advancedOptions = {\n      recoveryShareManagement:\n        advancedOptions?.recoveryShareManagement ??\n        RecoveryShareManagement.AWS_MANAGED,\n    };\n    this.AuthQuerier = querier;\n    this.localStorage = new LocalStorage({ clientId });\n    this.onAuthSuccess = onAuthSuccess;\n    this.userManagedLogin = new UserManagedLogin({\n      postLogin: async (result) => {\n        return this.postLogin(result);\n      },\n      preLogin: async () => {\n        await this.preLogin();\n      },\n      querier: querier,\n      clientId,\n    });\n    this.awsManagedLogin = new AwsManagedLogin({\n      postLogin: async (result) => {\n        return this.postLogin(result);\n      },\n      preLogin: async () => {\n        await this.preLogin();\n      },\n      querier: querier,\n      clientId,\n    });\n  }\n\n  private async preLogin() {\n    await this.logout();\n  }\n\n  private async postLogin({\n    storedToken,\n    walletDetails,\n  }: AuthAndWalletRpcReturnType): Promise<AuthLoginReturnType> {\n    if (storedToken.shouldStoreCookieString) {\n      await this.localStorage.saveAuthCookie(storedToken.cookieString);\n    }\n    const initializedUser = await this.onAuthSuccess({\n      storedToken,\n      walletDetails,\n    });\n    return initializedUser;\n  }\n\n  /**\n   * @description\n   * Used to log the user in with an oauth login flow\n   *\n   * Note that you have to either enable \"Auth0\" or \"Custom JSON Web Token\" in the [auth setting dashboard](https://withpaper.com/dashboard/auth-settings) in order to use this\n   * @param {string} jwtParams.token The associate token from the oauth callback\n   * @param {AuthProvider} jwtParams.provider The Auth provider that is being used\n   * @param {string} jwtParams.recoveryCode This has to be passed in if the user is not logging in for the first time in order for us to decrypt and recover the users wallet\n   * @returns {{user: InitializedUser}} An InitializedUser object containing the user's status, wallet, authDetails, and more\n   */\n  async loginWithJwtAuth({\n    token,\n    authProvider,\n    recoveryCode,\n  }: AuthQuerierTypes[\"loginWithJwtAuthCallback\"]): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithJwtAuthCallback\",\n      params: {\n        token,\n        authProvider,\n        recoveryCode,\n      },\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * Used to log the user into their Paper wallet on your platform via a myriad of auth providers\n   *\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"YOUR_CLIENT_ID\", chain: \"Polygon\"})\n   * try {\n   *   const user = await Paper.auth.loginWithPaperModal();\n   *   // user is now logged in\n   * } catch (e) {\n   *   // User closed modal or something else went wrong during the authentication process\n   *   console.error(e)\n   * }\n   *\n   * @param {(userWalletId: string) => Promise<string | undefined>} args.getRecoveryCode Only present when using RecoveryShareManagement.USER_MANAGED recovery share management. A function that returns the recovery code for a given userWalletId.\n   *\n   * @returns {{user: InitializedUser}} An InitializedUser object. See {@link PaperEmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithPaperModal(\n    args?: T extends RecoveryShareManagement.AWS_MANAGED\n      ? void\n      : Parameters<UserManagedLogin[\"loginWithPaperModal\"]>[0],\n  ): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    if (\n      this.advancedOptions.recoveryShareManagement ===\n      RecoveryShareManagement.AWS_MANAGED\n    ) {\n      return this.awsManagedLogin.loginWithPaperModal();\n    }\n    return this.userManagedLogin.loginWithPaperModal(\n      args as Parameters<UserManagedLogin[\"loginWithPaperModal\"]>[0],\n    );\n  }\n\n  /**\n   * @description\n   * Used to log the user into their Paper wallet using email OTP\n   *\n   * @example\n   *  // Basic Flow\n   *  const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  try {\n   *    // prompts user to enter the code they received\n   *    const user = await Paper.auth.loginWithPaperEmailOtp({ email : \"you@example.com\" });\n   *    // user is now logged in\n   *  } catch (e) {\n   *    // User closed the OTP modal or something else went wrong during the authentication process\n   *    console.error(e)\n   *  }\n   *\n   * @example\n   *  // If you want users to never be prompted for a recovery code.\n   *  const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  try {\n   *    const email = \"you@example.com\";\n   *\n   *    // getRecoveryCodeForUser is a function to get a recovery code based on an email\n   *    // you write the function below\n   *    const recoveryCode: string | undefined = await getRecoveryCodeForUser(email);\n   *\n   *    // prompts user to enter the code they received\n   *    // Because you pass in a recovery code wherever possible, for existing users on a new device, they would not be prompted to enter the recovery code flow\n   *    const user = await Paper.auth.loginWithPaperEmailOtp({ email, recoveryCode });\n   *    // user is now logged in\n   *    if (user.authDetails.recoveryCode) {\n   *      // user has a recovery code that you can store to pass in to the function above\n   *      // you write the function below\n   *      await storeRecoveryCodeForUser(email, user.authDetails.recoveryCode);\n   *    }\n   *  } catch (e) {\n   *    // User closed the OTP modal or something else went wrong during the authentication process\n   *    console.error(e)\n   *  }\n   *\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @param {string} props.recoveryCode Only present when using RecoveryShareManagement.USER_MANAGED recovery share management. Specifies the recoveryCode for the given email. This will set recoveryCode as the code for the user if they are new, or user recoveryCode for the user if they are an existing user\n   * @returns {{user: InitializedUser}} An InitializedUser object. See {@link PaperEmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithPaperEmailOtp(\n    args: T extends RecoveryShareManagement.AWS_MANAGED\n      ? Parameters<AwsManagedLogin[\"loginWithPaperEmailOtp\"]>[0]\n      : Parameters<UserManagedLogin[\"loginWithPaperEmailOtp\"]>[0],\n  ): Promise<AuthLoginReturnType> {\n    if (\n      this.advancedOptions.recoveryShareManagement ===\n      RecoveryShareManagement.AWS_MANAGED\n    ) {\n      return this.awsManagedLogin.loginWithPaperEmailOtp({\n        email: args.email,\n      });\n    }\n    return this.userManagedLogin.loginWithPaperEmailOtp(args);\n  }\n\n  async loginWithGoogle(\n    args?: T extends RecoveryShareManagement.AWS_MANAGED\n      ? Parameters<AwsManagedLogin[\"loginWithGoogle\"]>[0]\n      : Parameters<UserManagedLogin[\"loginWithGoogle\"]>[0],\n  ): Promise<AuthLoginReturnType> {\n    if (\n      this.advancedOptions.recoveryShareManagement ===\n      RecoveryShareManagement.AWS_MANAGED\n    ) {\n      return this.awsManagedLogin.loginWithGoogle(args);\n    }\n    return this.userManagedLogin.loginWithGoogle();\n  }\n\n  /**\n   * @description\n   * A headless way to send the users at {email} an OTP code.\n   * You need to then call {@link Auth.verifyPaperEmailLoginOtp} in order to complete the login process\n   *\n   * @example\n   *  const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  // sends user an OTP code\n   * try {\n   *    const { isNewUser } = await Paper.auth.sendPaperEmailLoginOtp({ email : \"you@example.com\" });\n   * } catch(e) {\n   *    // Error Sending user's email an OTP code\n   *    console.error(e);\n   * }\n   *\n   * // Then when your user is ready to verify their OTP\n   * try {\n   *    const user = await Paper.auth.verifyPaperEmailLoginOtp({ email: \"you@example.com\", otp: \"6-DIGIT_CODE_HERE\", recoveryCode: \"Required if user is an existing user. i.e. !isNewUser\"});\n   * } catch(e) {\n   *    // Error verifying the OTP code\n   *    console.error(e)\n   * }\n   *\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns {{ success: boolean, isNewUser: boolean }} Success: indicating if the email was successfully sent (Note the email could still end up in the user's spam folder). IsNewUser indicates if the user is a new user to your platform\n   */\n  async sendPaperEmailLoginOtp({\n    email,\n  }: AuthQuerierTypes[\"sendPaperEmailLoginOtp\"]): Promise<SendEmailOtpReturnType> {\n    if (\n      this.advancedOptions.recoveryShareManagement ===\n      RecoveryShareManagement.AWS_MANAGED\n    ) {\n      return this.awsManagedLogin.sendPaperEmailLoginOtp({\n        email,\n        recoveryShareManagement: RecoveryShareManagement.AWS_MANAGED,\n      });\n    }\n    return this.userManagedLogin.sendPaperEmailLoginOtp({\n      email,\n    });\n  }\n\n  /**\n   *  @description\n   * Used to verify the otp that the user receives from  Paper\n   *\n   * See {@link Auth.sendPaperEmailLoginOtp} for how the headless call flow looks like. Simply swap out the calls to `loginWithPaperEmailOtp` with `verifyPaperEmailLoginOtp`\n   *\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @param {string} props.otp The code that the user received in their email\n   * @param {string} props.recoveryCode The code that is first sent to the user when they sign up. Required if user is an existing user. i.e. !isNewUser from return params of {@link Auth.sendPaperEmailLoginOtp}\n   * @returns {{user: InitializedUser}} An InitializedUser object containing the user's status, wallet, authDetails, and more\n   */\n  async verifyPaperEmailLoginOtp(\n    args: T extends RecoveryShareManagement.AWS_MANAGED\n      ? Parameters<AwsManagedLogin[\"verifyPaperEmailLoginOtp\"]>[0]\n      : Parameters<UserManagedLogin[\"verifyPaperEmailLoginOtp\"]>[0],\n  ) {\n    if (\n      this.advancedOptions.recoveryShareManagement ===\n      RecoveryShareManagement.AWS_MANAGED\n    ) {\n      return this.awsManagedLogin.verifyPaperEmailLoginOtp(args);\n    }\n    return this.userManagedLogin.verifyPaperEmailLoginOtp(args);\n  }\n\n  /**\n   * @description\n   * Logs any existing user out of their wallet.\n   * @returns {{success: boolean}} true if a user is successfully logged out. false if there's no user currently logged in.\n   */\n  async logout(): Promise<LogoutReturnType> {\n    const { success } = await this.AuthQuerier.call<LogoutReturnType>({\n      procedureName: \"logout\",\n      params: undefined,\n    });\n    const isRemoveAuthCookie = await this.localStorage.removeAuthCookie();\n    const isRemoveUserId = await this.localStorage.removeWalletUserId();\n\n    return {\n      success: success || isRemoveAuthCookie || isRemoveUserId,\n    };\n  }\n}\n","import type { Chain } from \"@paperxyz/sdk-common-utilities\";\nimport type { ClientIdWithQuerierAndChainType } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport type {\n  CallContractReturnType,\n  ContractCallInputType,\n} from \"../../interfaces/EmbeddedWallets/GaslessTransactionMaker\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\nexport type GaslessTransactionQuerierTypes = {\n  callContract: {\n    contractAddress: string;\n    method: {\n      stub: string;\n      args: Array<unknown>;\n    };\n    chain: Chain;\n  };\n};\n\n/**\n * @description GaslessTransactionMaker is used to execute gasless transactions from the embedded wallets\n */\nexport class GaslessTransactionMaker {\n  protected chain: Chain;\n  protected clientId: string;\n  protected gaslessTransactionQuerier: EmbeddedWalletIframeCommunicator<GaslessTransactionQuerierTypes>;\n  constructor({ chain, clientId, querier }: ClientIdWithQuerierAndChainType) {\n    this.chain = chain;\n    this.clientId = clientId;\n    this.gaslessTransactionQuerier = querier;\n  }\n  /**\n   * @description\n   * Use to call arbitrary contracts on the blockchain. Note that you have to enable {@link https://withpaper.com/dashboard/developers Sponsored Fees} in order for this to work.\n   *\n   * @param {string} params.contractAddress The address for which the contract call is directed too.\n   * @param {string} params.methodInterface the function stub on the contract. This looks something like `function myFunctionName(address user, uint256 tokenId) external payable`. Refer to this {@link https://blog.ricmoo.com/human-readable-contract-abis-in-ethers-js-141902f4d917 ethers.js article} for more.\n   * @param {Array} params.methodArgs The arguments that is to be passed to the contract in order that they are to be passed to the contract.\n   * @throws if there is an error calling the contract for whatever reason.\n   * @returns {{ transactionHash: string }} The transaction hash associated with the successful contract call.\n   */\n  async callContract({\n    contractAddress,\n    methodArgs,\n    methodInterface,\n  }: ContractCallInputType): Promise<CallContractReturnType> {\n    return await this.gaslessTransactionQuerier.call<CallContractReturnType>({\n      procedureName: \"callContract\",\n      params: {\n        chain: this.chain,\n        contractAddress,\n        method: {\n          args: methodArgs,\n          stub: methodInterface,\n        },\n      },\n    });\n  }\n}\n","import type {\n  Provider,\n  TransactionRequest,\n} from \"@ethersproject/abstract-provider\";\nimport type {\n  TypedDataDomain,\n  TypedDataField,\n} from \"@ethersproject/abstract-signer\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport type { Bytes } from \"@ethersproject/bytes\";\nimport type { Deferrable } from \"@ethersproject/properties\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport type { ClientIdWithQuerierType } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport type {\n  GetAddressReturnType,\n  SignMessageReturnType,\n  SignTransactionReturnType,\n  SignedTypedDataReturnType,\n} from \"../../interfaces/EmbeddedWallets/Signer\";\n\nimport type { JsonRpcProvider } from \"@ethersproject/providers\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\nexport type SignerProcedureTypes = {\n  getAddress: void;\n  signMessage: {\n    message: string | Bytes;\n    chainId: number;\n    rpcEndpoint: string;\n  };\n  signTransaction: {\n    transaction: Deferrable<TransactionRequest>;\n    chainId: number;\n    rpcEndpoint: string;\n  };\n  signTypedDataV4: {\n    domain: TypedDataDomain;\n    types: Record<string, Array<TypedDataField>>;\n    message: Record<string, unknown>;\n    chainId: number;\n    rpcEndpoint: string;\n  };\n  connect: { provider: Provider };\n};\n\nexport class EthersSigner extends Signer {\n  protected querier: EmbeddedWalletIframeCommunicator<SignerProcedureTypes>;\n  protected clientId: string;\n  protected endpoint: string;\n  private DEFAULT_ETHEREUM_CHAIN_ID = 5;\n  constructor({\n    provider,\n    clientId,\n    querier,\n  }: ClientIdWithQuerierType & {\n    provider: Provider;\n  }) {\n    super();\n    this.clientId = clientId;\n    this.querier = querier;\n    // we try to extract a url if possible\n    this.endpoint = (provider as JsonRpcProvider).connection?.url;\n    defineReadOnly(this, \"provider\", provider);\n  }\n\n  override async getAddress(): Promise<string> {\n    const { address } = await this.querier.call<GetAddressReturnType>({\n      procedureName: \"getAddress\",\n      params: undefined,\n    });\n    return address;\n  }\n\n  override async signMessage(message: string | Bytes): Promise<string> {\n    const network = await this.provider?.getNetwork();\n    if (network) {\n      network._defaultProvider;\n    }\n\n    const { signedMessage } = await this.querier.call<SignMessageReturnType>({\n      procedureName: \"signMessage\",\n      params: {\n        message,\n        chainId:\n          (await this.provider?.getNetwork())?.chainId ??\n          this.DEFAULT_ETHEREUM_CHAIN_ID,\n        rpcEndpoint: this.endpoint,\n      },\n    });\n    return signedMessage;\n  }\n\n  override async signTransaction(\n    transaction: TransactionRequest,\n  ): Promise<string> {\n    const { signedTransaction } =\n      await this.querier.call<SignTransactionReturnType>({\n        procedureName: \"signTransaction\",\n        params: {\n          transaction,\n          chainId:\n            (await this.provider?.getNetwork())?.chainId ??\n            this.DEFAULT_ETHEREUM_CHAIN_ID,\n          rpcEndpoint: this.endpoint,\n        },\n      });\n    return signedTransaction;\n  }\n\n  async _signTypedData(\n    domain: SignerProcedureTypes[\"signTypedDataV4\"][\"domain\"],\n    types: SignerProcedureTypes[\"signTypedDataV4\"][\"types\"],\n    message: SignerProcedureTypes[\"signTypedDataV4\"][\"message\"],\n  ): Promise<string> {\n    const { signedTypedData } =\n      await this.querier.call<SignedTypedDataReturnType>({\n        procedureName: \"signTypedDataV4\",\n        params: {\n          domain,\n          types,\n          message,\n          chainId:\n            (await this.provider?.getNetwork())?.chainId ??\n            this.DEFAULT_ETHEREUM_CHAIN_ID,\n          rpcEndpoint: this.endpoint,\n        },\n      });\n    return signedTypedData;\n  }\n\n  override connect(provider: Provider): EthersSigner {\n    return new EthersSigner({\n      clientId: this.clientId,\n      provider,\n      querier: this.querier,\n    });\n  }\n}\n","import type { Networkish } from \"@ethersproject/providers\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\nimport type { Chain } from \"@paperxyz/sdk-common-utilities\";\nimport { ChainToPublicRpc } from \"@paperxyz/sdk-common-utilities\";\nimport type {\n  ClientIdWithQuerierAndChainType,\n  GetUserWalletStatusFnReturnType,\n  GetUserWalletStatusRpcReturnType,\n  SetUpWalletRpcReturnType,\n  WalletAddressObjectType,\n} from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport { UserWalletStatus } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\n\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport { LocalStorage } from \"../../utils/Storage/LocalStorage\";\nimport { GaslessTransactionMaker } from \"./GaslessTransactionMaker\";\nimport { EthersSigner } from \"./Signer\";\n\nexport type WalletManagementTypes = {\n  createWallet: void;\n  setUpNewDevice: void;\n  getUserStatus: void;\n};\nexport type WalletManagementUiTypes = {\n  createWalletUi: void;\n  setUpNewDeviceUi: void;\n};\n\nexport type EmbeddedWalletInternalHelperType = { showUi: boolean };\n\nexport class EmbeddedWallet {\n  protected clientId: string;\n  protected chain: Chain;\n  protected walletManagerQuerier: EmbeddedWalletIframeCommunicator<\n    WalletManagementTypes & WalletManagementUiTypes\n  >;\n  protected localStorage: LocalStorage;\n\n  public gasless: GaslessTransactionMaker;\n\n  /**\n   * Not meant to be initialized directly. Call {@link .initializeUser} to get an instance\n   * @param param0\n   */\n  constructor({ clientId, chain, querier }: ClientIdWithQuerierAndChainType) {\n    this.clientId = clientId;\n    this.chain = chain;\n    this.walletManagerQuerier = querier;\n\n    this.gasless = new GaslessTransactionMaker({\n      chain,\n      clientId,\n      querier,\n    });\n\n    this.localStorage = new LocalStorage({ clientId });\n  }\n\n  /**\n   * @internal\n   * Used to set-up the user device in the case that they are using incognito\n   * @param {string} param.deviceShareStored the value that is saved for the user's device share.\n   * We save this into the localStorage on the site itself if we could not save it within the iframe's localStorage.\n   * This happens in incognito mostly\n   * @param {string} param.walletAddress User's wallet address\n   * @param {boolean} param.isIframeStorageEnabled Tells us if we were able to store values in the localStorage in our iframe.\n   * We need to store it under the dev's domain localStorage if we weren't able to store things in the iframe\n   * @returns {{ walletAddress : string }} The user's wallet details\n   */\n  async postWalletSetUp({\n    deviceShareStored,\n    walletAddress,\n    isIframeStorageEnabled,\n    walletUserId,\n  }: SetUpWalletRpcReturnType & {\n    walletUserId: string;\n  }): Promise<WalletAddressObjectType> {\n    if (!isIframeStorageEnabled) {\n      await this.localStorage.saveDeviceShare(deviceShareStored, walletUserId);\n    }\n    return { walletAddress };\n  }\n\n  /**\n   * @internal\n   * Gets the various status states of the user\n   * @example\n   *  const userStatus = await Paper.getUserWalletStatus();\n   *  switch (userStatus.status) {\n   *  case UserWalletStatus.LOGGED_OUT: {\n   *    // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED: {\n   *    // User is logged in, but does not have a wallet associated with it\n   *    // you also have access to the user's details\n   *    userStatus.user.authDetails;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_NEW_DEVICE: {\n   *    // User is logged in and created a wallet already, but is missing the device shard\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *    // user is logged in and wallet is all set up.\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    userStatus.user.wallet;\n   *    break;\n   *  }\n   *}\n   * @returns {GetUserWalletStatusFnReturnType} an object to containing various information on the user statuses\n   */\n  async getUserWalletStatus(): Promise<GetUserWalletStatusFnReturnType> {\n    const userStatus =\n      await this.walletManagerQuerier.call<GetUserWalletStatusRpcReturnType>({\n        procedureName: \"getUserStatus\",\n        params: undefined,\n      });\n    if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED) {\n      return {\n        status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\n        user: { ...userStatus.user, wallet: this },\n      };\n    }\n    return userStatus;\n  }\n\n  /**\n   * @description\n   * Switches the chain that the user wallet is currently on.\n   * @example\n   * // user wallet will be set to Polygon\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.initializeUser();\n   * // Switch the user wallet to Mumbai\n   * await user.wallet.setChain({ chain: \"Mumbai\" });\n   * @param {Chain} params.chain The chain that we are changing the user wallet too\n   */\n  async setChain({ chain }: { chain: Chain }): Promise<void> {\n    this.chain = chain;\n    this.gasless = new GaslessTransactionMaker({\n      chain,\n      clientId: this.clientId,\n      querier: this.walletManagerQuerier,\n    });\n  }\n\n  /**\n   * Returns an Ethers.Js compatible signer that you can use in conjunction with the rest of dApp\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.getUser();\n   * if (user.status === UserStatus.LOGGED_IN_WALLET_INITIALIZED) {\n   *    // returns a signer on the Polygon mainnet\n   *    const signer = await user.getEthersJsSigner();\n   *    // returns a signer on the specified RPC endpoints\n   *    const signer = await user.getEthersJsSigner({rpcEndpoint: \"https://eth-rpc.gateway.pokt.network\"});\n   * }\n   * @param {Networkish} network.rpcEndpoint the rpc url where calls will be routed through\n   * @throws If attempting to call the function without the user wallet initialize on their current device. This should never happen if call {@link PaperEmbeddedWalletSdk.initializeUser} before accessing this function\n   * @returns A signer that is compatible with Ether.js. Defaults to the public rpc on the chain specified when initializing the {@link PaperEmbeddedWalletSdk} instance\n   */\n  async getEthersJsSigner(network?: {\n    rpcEndpoint: Networkish;\n  }): Promise<EthersSigner> {\n    const signer = new EthersSigner({\n      clientId: this.clientId,\n      provider: getDefaultProvider(\n        network?.rpcEndpoint ?? ChainToPublicRpc[this.chain],\n      ),\n      querier: this.walletManagerQuerier,\n    });\n    return signer;\n  }\n}\n","import { RecoveryShareManagement } from \"../interfaces/Auth\";\nimport type {\n  GetUser,\n  PaperConstructorType,\n} from \"../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport {\n  UserStatus,\n  UserWalletStatus,\n} from \"../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport { EmbeddedWalletIframeCommunicator } from \"../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport type { AuthQuerierTypes } from \"./Auth\";\nimport { Auth } from \"./Auth\";\nimport { EmbeddedWallet } from \"./EmbeddedWallets/EmbeddedWallet\";\n\nexport class PaperEmbeddedWalletSdk<\n  T extends RecoveryShareManagement = RecoveryShareManagement.USER_MANAGED,\n> {\n  protected clientId: string;\n  protected querier: EmbeddedWalletIframeCommunicator<AuthQuerierTypes>;\n\n  private wallet: EmbeddedWallet;\n  /**\n   * Used to manage the Auth state of the user.\n   */\n  auth: Auth<T>;\n\n  /**\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({ clientId: \"\", chain: \"Goerli\" });\n   * @param {string} initParams.clientId the clientId found on the {@link https://withpaper.com/dashboard/developers developer's dashboard}\n   * @param {Chain} initParams.chain sets the default chain that the EmbeddedWallet will live on.\n   * @param {CustomizationOptionsType} initParams.styles sets the default style override for any modal that pops up asking for user's details when creating wallet or logging in.\n   */\n  constructor({\n    clientId,\n    chain,\n    styles,\n    advancedOptions,\n    onAuthSuccess,\n  }: PaperConstructorType<T>) {\n    this.clientId = clientId;\n    this.querier = new EmbeddedWalletIframeCommunicator({\n      clientId,\n      customizationOptions: styles,\n    });\n    this.wallet = new EmbeddedWallet({\n      clientId,\n      chain,\n      querier: this.querier,\n    });\n\n    this.auth = new Auth<T>({\n      clientId,\n      advancedOptions: {\n        recoveryShareManagement: RecoveryShareManagement.USER_MANAGED,\n        ...(advancedOptions ?? {}),\n      },\n      querier: this.querier,\n      onAuthSuccess: async (authResult) => {\n        await this.wallet.postWalletSetUp({\n          ...authResult.walletDetails,\n          walletUserId: authResult.storedToken.authDetails.userWalletId,\n        });\n        await this.querier.call({\n          procedureName: \"initIframe\",\n          params: {\n            deviceShareStored: authResult.walletDetails.deviceShareStored,\n            clientId: this.clientId,\n            walletUserId: authResult.storedToken.authDetails.userWalletId,\n            authCookie: authResult.storedToken.cookieString,\n          },\n        });\n        onAuthSuccess?.(authResult);\n        return {\n          user: {\n            status: UserStatus.LOGGED_IN_WALLET_INITIALIZED,\n            authDetails: authResult.storedToken.authDetails,\n            wallet: this.wallet,\n            walletAddress: authResult.walletDetails.walletAddress,\n          },\n        };\n      },\n    });\n  }\n\n  /**\n   * Gets the usr if they are logged in\n   * @example\n   *  const user = await Paper.getUser();\n   *  switch (user.status) {\n   *     case UserStatus.LOGGED_OUT: {\n   *       // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n   *       break;\n   *     }\n   *     case UserStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *       // user is logged in and wallet is all set up.\n   *       // You have access to:\n   *       user.status;\n   *       user.authDetails;\n   *       user.walletAddress;\n   *       user.wallet;\n   *       break;\n   *     }\n   *}\n   * @returns {GetUser} an object to containing various information on the user statuses\n   */\n  async getUser(): Promise<GetUser> {\n    const userStatus = await this.wallet.getUserWalletStatus();\n    switch (userStatus.status) {\n      // user gets {UserWalletStatus.LOGGED_IN_NEW_DEVICE} when they log in but never complete the recovery flow and exits (close modal, refresh etc)\n      case UserWalletStatus.LOGGED_IN_NEW_DEVICE:\n      // User gets {UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED} when they log in but manage to exit the client in the small window between auth completion and sending them their wallet recovery details\n      case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED:\n        // in both case, we simply log them out to reset their state\n        await this.auth.logout();\n        return this.getUser();\n      case UserWalletStatus.LOGGED_OUT:\n        return {\n          status: UserStatus.LOGGED_OUT,\n        };\n      case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED:\n        return {\n          status: UserStatus.LOGGED_IN_WALLET_INITIALIZED,\n          ...userStatus.user,\n        };\n    }\n  }\n}\n","export const ChainToPublicRpc: Record<Chain, string> = {\n  Ethereum: \"https://ethereum.rpc.thirdweb.com\",\n  Goerli: \"https://goerli.rpc.thirdweb.com\",\n  Mumbai: \"https://mumbai.rpc.thirdweb.com\",\n  Polygon: \"https://polygon.rpc.thirdweb.com\",\n  Avalanche: \"https://avalanche.rpc.thirdweb.com\",\n  Optimism: \"https://optimism.rpc.thirdweb.com\",\n  OptimismGoerli: \"https://optimism-goerli.rpc.thirdweb.com\",\n  BSC: \"https://binance.rpc.thirdweb.com\",\n  BSCTestnet: \"https://binance-testnet.rpc.thirdweb.com\",\n  ArbitrumOne: \"https://arbitrum.rpc.thirdweb.com\",\n  ArbitrumGoerli: \"https://arbitrum-goerli.rpc.thirdweb.com\",\n  Fantom: \"https://fantom.rpc.thirdweb.com\",\n  FantomTestnet: \"https://fantom-testnet.rpc.thirdweb.com\",\n  Sepolia: \"https://sepolia.rpc.thirdweb.com\",\n  AvalancheFuji: \"https://avalanche-fuji.rpc.thirdweb.com\",\n};\n\nexport const ChainIdToChain: Record<number, Chain> = {\n  1: \"Ethereum\",\n  5: \"Goerli\",\n  80001: \"Mumbai\",\n  137: \"Polygon\",\n  43114: \"Avalanche\",\n  10: \"Optimism\",\n  420: \"OptimismGoerli\",\n  56: \"BSC\",\n  97: \"BSCTestnet\",\n  42161: \"ArbitrumOne\",\n  421613: \"ArbitrumGoerli\",\n  250: \"Fantom\",\n  4002: \"FantomTestnet\",\n  11155111: \"Sepolia\",\n  43113: \"AvalancheFuji\",\n};\n\n// General Embedded wallet types\nexport type Chain =\n  | \"Polygon\"\n  | \"Mumbai\"\n  | \"Goerli\"\n  | \"Ethereum\"\n  | \"Avalanche\"\n  | \"Optimism\"\n  | \"OptimismGoerli\"\n  | \"BSC\"\n  | \"BSCTestnet\"\n  | \"ArbitrumOne\"\n  | \"ArbitrumGoerli\"\n  | \"Fantom\"\n  | \"FantomTestnet\"\n  | \"Sepolia\"\n  | \"AvalancheFuji\";\n\nexport type SupportedChainName = Chain | \"Rinkeby\" | \"Solana\" | \"SolanaDevnet\";\n","const isDev = (): boolean => {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.localStorage.getItem(\"IS_PAPER_DEV\") === \"true\"\n  );\n};\n\nconst isOldPaperDomain = (): boolean =>\n  typeof window !== \"undefined\" && window.location.origin.includes(\"paper.xyz\");\n\nconst isThirdwebDomain = (): boolean =>\n  typeof window !== \"undefined\" &&\n  window.location.origin.includes(\"thirdweb.com\");\n\nexport const getPaperOriginUrl = (): string => {\n  if (isDev())\n    return (\n      window.localStorage.getItem(\"PAPER_DEV_URL\") ?? \"http://localhost:3000\"\n    );\n\n  if (isOldPaperDomain()) return window.location.origin;\n  if (isThirdwebDomain()) return window.location.origin;\n\n  return \"https://withpaper.com\";\n};\n"],"names":["n","t","a","E","L","concat","s","I","W","DEVICE_SHARE_LOCAL_STORAGE_NAME","e","w","USER_MANAGED","AWS_MANAGED","Y","PAPER_EMAIL_OTP","GOOGLE","TWITTER","COGNITO","AUTH0","CUSTOM_JWT","H","LOGGED_OUT","LOGGED_IN_WALLET_INITIALIZED","P","LOGGED_IN_WALLET_UNINITIALIZED","LOGGED_IN_NEW_DEVICE","F","Map","h","constructor","_ref","clientId","this","isSupported","window","localStorage","getItem","i","get","setItem","set","removeItem","saveAuthCookie","getAuthCookie","removeAuthCookie","saveDeviceShare","saveWalletUserId","getDeviceShare","getWalletUserId","removeDeviceShare","removeWalletUserId","v","Promise","setTimeout","ee","height","width","border","backgroundColor","colorScheme","position","top","right","zIndex","display","G","f","_ref2","link","iframeId","container","r","document","body","iframeStyles","onIframeInitialize","o","POLLING_INTERVAL_SECONDS","POST_LOAD_BUFFER_SECONDS","getElementById","d","URL","l","searchParams","src","href","createElement","p","u","Object","assign","style","setAttribute","appendChild","onload","onIframeLoadHandler","iframe","onIframeLoadedInitVariables","MessageChannel","port1","onmessage","m","data","c","close","success","Error","error","contentWindow","postMessage","eventType","S","port2","call","arguments","_ref3","_this","procedureName","params","showIframe","injectRecoveryCode","isInjectRecoveryCode","g","U","b","origin","type","userWalletId","V","getRecoveryCode","recoveryCode","removeEventListener","addEventListener","destroy","delete","_","_ref4","customizationOptions","super","ie","re","path","queryParams","authCookie","deviceShareStored","walletUserId","_ref5","te","keys","toString","A","_ref6","querier","preLogin","postLogin","LoginQuerier","sendPaperEmailLoginOtp","_ref7","_this2","email","recoveryShareManagement","isNewUser","isNewDevice","C","closeWindow","_ref8","isWindowOpenedByFn","win","closeOpenedWindow","loginWithPaperModal","getGoogleLoginUrl","loginWithGoogle","openedWindow","open","loginLink","location","setInterval","closed","clearInterval","j","authResult","developerClientId","storedToken","y","shouldStoreCookieString","walletDetails","isIframeStorageEnabled","loginWithPaperEmailOtp","_ref9","_this3","verifyPaperEmailLoginOtp","_ref10","_this4","otp","D","_ref11","_this5","_ref12","_this6","M","_ref13","advancedOptions","onAuthSuccess","AuthQuerier","userManagedLogin","awsManagedLogin","logout","_ref14","_this7","cookieString","loginWithJwtAuth","_ref15","_this8","token","authProvider","_ref16","_this9","R","_ref17","chain","gaslessTransactionQuerier","callContract","_ref18","_this10","contractAddress","methodArgs","methodInterface","method","args","stub","T","ne","_ref19","provider","DEFAULT_ETHEREUM_CHAIN_ID","endpoint","connection","url","ae","getAddress","address","signMessage","getNetwork","_defaultProvider","signedMessage","message","chainId","rpcEndpoint","signTransaction","signedTransaction","transaction","_signTypedData","signedTypedData","domain","types","connect","O","_ref20","walletManagerQuerier","gasless","postWalletSetUp","_ref21","_this11","walletAddress","getUserWalletStatus","status","user","wallet","setChain","_ref22","_this12","getEthersJsSigner","oe","se","N","_ref23","styles","auth","authDetails","getUser","Ethereum","Goerli","Mumbai","Polygon","Avalanche","Optimism","OptimismGoerli","BSC","BSCTestnet","ArbitrumOne","ArbitrumGoerli","Fantom","FantomTestnet","Sepolia","AvalancheFuji","getPaperOriginUrl","includes"],"sourceRoot":""}