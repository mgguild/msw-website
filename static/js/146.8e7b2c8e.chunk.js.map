{"version":3,"file":"static/js/146.8e7b2c8e.chunk.js","mappings":"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","sources":["../node_modules/@noble/curves/node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/curves/node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/curves/node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/curves/node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/curves/node_modules/@noble/hashes/src/sha256.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/curves/src/abstract/hash-to-curve.ts","../node_modules/@noble/curves/node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@noble/curves/src/secp256k1.ts"],"sourcesContent":["export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime, Fp2 for example has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n// 0 is non-invertible: non-batched version will throw on 0\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. curveFn.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      // Zero is valid point too!\n      if (this.is0()) {\n        if (CURVE.allowInfinityPoint) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size (nBitLength+64)\n     * as per FIPS 186 B.4.1 with modulo bias being neglible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const rand = CURVE.randomBytes(Fp.BYTES + 8);\n      const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * From draft-irtf-cfrg-hash-to-curve-16\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport { bytesToNumberBE, CHash, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\nfunction validateDST(dst: UnicodeOrBytes): Uint8Array {\n  if (dst instanceof Uint8Array) return dst;\n  if (typeof dst === 'string') return utf8ToBytes(dst);\n  throw new Error('DST must be Uint8Array or string');\n}\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction isBytes(item: unknown): void {\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\n}\nfunction isNum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'string',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  isBytes(msg);\n  isNum(count);\n  const DST = validateDST(_DST);\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n"],"names":["number","n","Number","isSafeInteger","Error","concat","bytes","b","Uint8Array","_len","arguments","length","lengths","Array","_key","includes","assert","bool","hash","create","outputLen","blockLen","exists","instance","checkFinished","undefined","destroyed","finished","output","out","min","crypto","globalThis","u8a","a","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","Uint32Array","from","v","i","toString","padStart","toBytes","data","str","TextEncoder","encode","utf8ToBytes","concatBytes","arrays","r","reduce","sum","pad","forEach","set","Hash","_classCallCheck","_createClass","key","value","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","getRandomValues","SHA2","_Hash","_inherits","_super","_createSuper","padOffset","isLE","_this","call","pos","view","len","take","Math","subarray","process","dataView","roundClean","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digestInto","res","slice","destroy","to","_to","constructor","apply","_toConsumableArray","Maj","c","SHA256_K","IV","SHA256_W","SHA256","_SHA","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","SHA224","_SHA2","_super2","_this2","sha256","_0n","_1n","_2n","_3n","_4n","_5n","_8n","mod","result","pow","num","power","modulo","pow2","x","invert","y","u","q","m","FpSqrt","P","p1div4","Fp","root","eql","sqr","c1","n2","mul","nv","sub","ONE","Q","S","Z","legendreC","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","validateField","field","opts","map","val","ORDER","MASK","BYTES","BITS","validateObject","nLength","nBitLength","_nBitLength","nByteLength","ceil","validateBasic","curve","Gx","Gy","Object","freeze","_objectSpread","p","b2n","ut","h2b","DER","Err","_Error","DERErr","_wrapNativeSuper","_parseInt","d","toSig","hex","_DER$_parseInt","sBytes","_DER$_parseInt2","s","hexFromSig","sig","parseInt","shl","rhl","sl","rl","weierstrassPoints","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","beta","splitScalar","validatePointOpts","point","isCompressed","toAffine","tail","weierstrassEquation","x2","x3","add","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","ensureBytes","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","isValid","windowSize","_WINDOW_SIZE","delete","is0","_this$toAffine","left","right","isOdd","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","negate","equals","wnaf","wNAFCached","comp","toInv","invertBatch","fromAffine","I","unsafeLadder","_endo$splitScalar","k1neg","k1","k2neg","k2","k1p","k2p","double","scalar","fake","_endo$splitScalar2","_this$wNAF","wNAF","f1p","f","_this$wNAF2","f2p","constTimeNegate","_this$wNAF3","normalizeZ","BASE","multiply","multiplyUnsafe","iz","z","inv","ax","ay","zz","cofactor","assertValidity","toRawBytes","_ref","points","privateKey","_bits","bits","condition","item","W","windows","elm","precomputeWindow","_opts","base","window","push","precomputes","_opts2","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","hmac","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","_weierstrassPoints","cat","hasEvenY","head","y2","sqrt","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","msgHash","rec","radj","prefix","R","fromHex","ir","u1","u2","multiplyAndAddUnsafe","hasHighS","toDERHex","toCompactHex","_DER$toSig","utils","isValidPrivateKey","randomPrivateKey","groupOrder","hashLen","minLen","bytesToNumberLE","bytesToNumberBE","precompute","_setWindowSize","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","k","prehash","ent","extraEntropy","h1int","seedArgs","e","seed","k2sig","kBytes","ik","normS","normalizeS","defaultVerOpts","getPublicKey","fromPrivateKey","getSharedSecret","privateA","publicB","sign","privKey","_prepSig","drbg","verify","signature","publicKey","_Point$BASE$multiplyA","sg","_sig","fromDER","derError","fromCompact","message","_sig2","is","mapToCurveSimpleSWU","sqrtRatio","o","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","c7","tv1","tv2","tv3","tv5","tv4","isQR","cmov","tvv5","e1","y1","SWUFpSqrtRatio","tv6","_sqrtRatio","div","os2ip","i2osp","strxor","isBytes","isNum","hash_to_field","count","options","DST","expand","_DST","prb","dst","validateDST","log2p","L","len_in_bytes","lenInBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","expand_message_xmd","dkLen","expand_message_xof","j","elm_offset","tv","HMAC","iHash","oHash","buf","getPrototypeOf","getHash","msgs","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","bitLen","redef","_nLength","sqrtP","bitMask","lhs","rhs","FpPow","sqrN","addN","subN","mulN","lst","nums","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","numberToBytesLE","numberToBytesBE","Field","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","fe","TAGGED_HASH_PREFIXES","taggedHash","tag","tagP","tagH","charCodeAt","messages","pointToBytes","numTo32b","modP","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","_len2","_key2","schnorrGetPublicKey","schnorrSign","auxRand","_schnorrGetExtPubKey","t","rand","k_","_schnorrGetExtPubKey2","rx","schnorrVerify","pub","schnorr","isoMap","COEFF","reverse","_COEFF$map","_COEFF$map2","_slicedToArray","xNum","xDen","yNum","yDen","isogenyMap","mapSWU","htf","mapToCurve","def","hashToCurve","u0","encodeToCurve","encodeDST","createHasher","scalars","_mapSWU"],"sourceRoot":""}