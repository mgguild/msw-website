"use strict";(self.webpackChunkMetaSaga_Warriors=self.webpackChunkMetaSaga_Warriors||[]).push([[9252],{45216:(t,s,i)=>{function n(t){return"string"===typeof t?Number.parseInt(t,"0x"===t.trim().substring(0,2)?16:10):"bigint"===typeof t?Number(t):t}i.d(s,{n:()=>n})},59252:(t,s,i)=>{i.d(s,{LocalWalletConnector:()=>p});var n=i(22516),e=i(80584),a=i(45216),r=i(70252),o=i(51416),h=i(21204),c=i(75672),d=i(72728);i(83440);class g extends c.Signer{constructor(t){super(),this.signer=t,(0,d.defineReadOnly)(this,"provider",t.provider)}async getAddress(){return await this.signer.getAddress()}async signMessage(t){return await this.signer.signMessage(t)}async signTransaction(t){return await this.signer.signTransaction(t)}connect(t){return new g(this.signer.connect(t))}_signTypedData(t,s,i){return this.signer._signTypedData(t,s,i)}async sendTransaction(t){if(!this.provider)throw new Error("Provider not found");const s={...await(0,o.g)(this.provider),...t};return await this.signer.sendTransaction(s)}}var u=new WeakMap,l=new WeakMap;class p extends r.C{constructor(t){super(),(0,e._)(this,"id","local_wallet"),(0,e._)(this,"name","Local Wallet"),(0,n._)(this,u,{writable:!0,value:void 0}),(0,n._)(this,l,{writable:!0,value:void 0}),(0,e._)(this,"shimDisconnectKey","localWallet.shimDisconnect"),(0,e._)(this,"onChainChanged",(t=>{const s=(0,a.n)(t),i=!this.options.chains.find((t=>t.chainId===s));this.emit("change",{chain:{id:s,unsupported:i}})})),this.options=t}async connect(t){t.chainId&&this.switchChain(t.chainId);const s=await this.getSigner();return await s.getAddress()}async disconnect(){(0,n.a)(this,u,void 0),(0,n.a)(this,l,void 0)}async getAddress(){const t=await this.getSigner();if(!t)throw new Error("No signer found");return await t.getAddress()}async isConnected(){try{return!!await this.getAddress()}catch{return!1}}async getProvider(){return(0,n.b)(this,u)||(0,n.a)(this,u,(0,h.a_)(this.options.chain,{clientId:this.options.clientId,secretKey:this.options.secretKey})),(0,n.b)(this,u)}async getSigner(){if(!(0,n.b)(this,l)){const t=await this.getProvider();(0,n.a)(this,l,w(this.options.ethersWallet,t))}return(0,n.b)(this,l)}async switchChain(t){const s=this.options.chains.find((s=>s.chainId===t));if(!s)throw new Error("Chain not found for chainId ".concat(t,", please add it to the chains property when creating this wallet"));(0,n.a)(this,u,(0,h.a_)(s,{clientId:this.options.clientId,secretKey:this.options.secretKey})),(0,n.a)(this,l,w(this.options.ethersWallet,(0,n.b)(this,u))),this.onChainChanged(t)}async setupListeners(){}updateChains(t){this.options.chains=t}}function w(t,s){let i=t;return s&&(i=t.connect(s)),new g(i)}}}]);
//# sourceMappingURL=9252.07f5319c.chunk.js.map