{"version":3,"file":"static/js/6840.5f83dc03.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js"],"sourcesContent":["/**\n * @internal\n */\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\nimport { RecoveryShareManagement, UserStatus } from '@paperxyz/embedded-wallet-service-sdk';\nimport { utils } from 'ethers';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-8e17ffe6.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport 'eventemitter3';\n\nvar _signer = /*#__PURE__*/new WeakMap();\nclass PaperWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", walletIds.paper);\n    _defineProperty(this, \"name\", \"Paper Wallet\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"user\", null);\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.options.chains.findIndex(c => c.chainId === id) === -1;\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getPaperSDK() {\n    if (!this.paper) {\n      this.paper = new Promise(async (resolve, reject) => {\n        const recoveryMethod = this.options.advancedOptions?.recoveryShareManagement;\n        try {\n          const {\n            PaperEmbeddedWalletSdk\n          } = await import('@paperxyz/embedded-wallet-service-sdk');\n          const methodToEnum = {\n            AWS_MANAGED: RecoveryShareManagement.AWS_MANAGED,\n            USER_MANAGED: RecoveryShareManagement.USER_MANAGED\n          };\n          const recoveryShareManagement = recoveryMethod ? methodToEnum[recoveryMethod] : undefined;\n          resolve(new PaperEmbeddedWalletSdk({\n            advancedOptions: {\n              recoveryShareManagement\n            },\n            clientId: this.options.clientId,\n            chain: \"Ethereum\",\n            styles: this.options.styles,\n            onAuthSuccess: this.options.onAuthSuccess\n          }));\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n    return this.paper;\n  }\n  async connect(options) {\n    const paperSDK = await this.getPaperSDK();\n    if (!paperSDK) {\n      throw new Error(\"Paper SDK not initialized\");\n    }\n    const user = await paperSDK.getUser();\n    switch (user.status) {\n      case UserStatus.LOGGED_OUT:\n        {\n          let authResult;\n\n          // Show Google popup\n          if (options?.googleLogin) {\n            const arg = options.googleLogin;\n            authResult = await paperSDK.auth.loginWithGoogle(typeof arg === \"object\" ? arg : undefined);\n          }\n\n          // Headless\n          else if (options?.email && options?.otp) {\n            authResult = await paperSDK.auth.verifyPaperEmailLoginOtp({\n              email: options.email,\n              otp: options.otp,\n              recoveryCode: options.recoveryCode\n            });\n          }\n\n          // Show OTP modal\n          else if (options?.email) {\n            authResult = await paperSDK.auth.loginWithPaperEmailOtp({\n              email: options.email\n            });\n          }\n\n          // Show Full Modal\n          else {\n            authResult = await paperSDK.auth.loginWithPaperModal();\n          }\n          this.user = authResult.user;\n          break;\n        }\n      case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n        {\n          if (typeof options?.googleLogin === \"object\") {\n            if (options.googleLogin.closeOpenedWindow && options.googleLogin.openedWindow) {\n              options.googleLogin.closeOpenedWindow(options.googleLogin.openedWindow);\n            }\n          }\n          this.user = user;\n          break;\n        }\n    }\n    if (!this.user) {\n      throw new Error(\"Error connecting User\");\n    }\n    if (options?.chainId) {\n      this.switchChain(options.chainId);\n    }\n    this.setupListeners();\n    return this.getAddress();\n  }\n  async disconnect() {\n    const paper = await this.paper;\n    await paper?.auth.logout();\n    _classPrivateFieldSet(this, _signer, undefined);\n    this.user = null;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if (_classPrivateFieldGet(this, _signer)) {\n      return _classPrivateFieldGet(this, _signer);\n    }\n    if (!this.user) {\n      const paperSDK = await this.getPaperSDK();\n      const user = await paperSDK.getUser();\n      switch (user.status) {\n        case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n      }\n    }\n    const signer = await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    });\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    _classPrivateFieldSet(this, _signer, signer);\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n\n    // update chain in wallet\n    await this.user?.wallet.setChain({\n      chain: \"Ethereum\"\n    }); // just pass Ethereum no matter what chain we are going to connect\n\n    // update signer\n    _classPrivateFieldSet(this, _signer, await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    }));\n    this.emit(\"change\", {\n      chain: {\n        id: chainId,\n        unsupported: false\n      }\n    });\n  }\n\n  // private getUser() {\n  //   if (!this.user) {\n  //     throw new Error(\"User not found\");\n  //   }\n  //   return this.user;\n  // }\n\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  async getEmail() {\n    await this.getProvider();\n    if (!this.user) {\n      throw new Error(\"No user found, Paper Wallet is not connected\");\n    }\n    return this.user.authDetails.email;\n  }\n}\n\nexport { PaperWalletConnector };\n"],"names":["normalizeChainId","chainId","Number","parseInt","trim","substring","_signer","WeakMap","PaperWalletConnector","Connector","constructor","options","super","_defineProperty","this","walletIds","paper","_classPrivateFieldInitSpec","writable","value","async","accounts","length","onDisconnect","emit","account","utils","id","unsupported","chains","findIndex","c","chain","getPaperSDK","Promise","resolve","reject","_this$options$advance","recoveryMethod","advancedOptions","recoveryShareManagement","PaperEmbeddedWalletSdk","methodToEnum","AWS_MANAGED","RecoveryShareManagement","USER_MANAGED","undefined","clientId","styles","onAuthSuccess","err","connect","paperSDK","Error","user","getUser","status","UserStatus","LOGGED_OUT","authResult","googleLogin","arg","auth","loginWithGoogle","email","otp","verifyPaperEmailLoginOtp","recoveryCode","loginWithPaperEmailOtp","loginWithPaperModal","LOGGED_IN_WALLET_INITIALIZED","closeOpenedWindow","openedWindow","switchChain","setupListeners","getAddress","disconnect","logout","_classPrivateFieldSet","getSigner","isConnected","e","getProvider","signer","provider","_this$user","_classPrivateFieldGet","wallet","getEthersJsSigner","rpcEndpoint","rpc","isAuthorized","_this$user2","_this$user3","find","setChain","on","onAccountsChanged","onChainChanged","updateChains","getEmail","authDetails"],"sourceRoot":""}