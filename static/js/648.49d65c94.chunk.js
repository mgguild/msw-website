"use strict";(self.webpackChunkMetaSaga_Warriors=self.webpackChunkMetaSaga_Warriors||[]).push([[648],{59712:(i,t,n)=>{n.d(t,{W:()=>s});var e=n(46948),o=n(83440);class s extends o.c{constructor(i){let{chains:t=e.wFi,options:n}=i;super(),this.chains=t,this.options=n}getBlockExplorerUrls(i){var t,n;const e=null!==(t=null===(n=i.explorers)||void 0===n?void 0:n.map((i=>i.url)))&&void 0!==t?t:[];return e.length>0?e:void 0}isChainUnsupported(i){return!this.chains.some((t=>t.chainId===i))}updateChains(i){this.chains=i}}},45216:(i,t,n)=>{function e(i){return"string"===typeof i?Number.parseInt(i,"0x"===i.trim().substring(0,2)?16:10):"bigint"===typeof i?Number(i):i}n.d(t,{n:()=>e})},40648:(i,t,n)=>{n.d(t,{MagicAuthConnector:()=>l});var e=n(22516),o=n(80584),s=n(45216),a=n(74168),r=n(70036),c=n(13632),h=n(9508),d=n(59712);n(83440);class u extends d.W{constructor(i){super(i),(0,o._)(this,"id","magic-link"),(0,o._)(this,"name","Magic Link"),(0,o._)(this,"ready",!0),this.magicOptions=i.options}async getAccount(){const i=new a.u(await this.getProvider()).getSigner(),t=await i.getAddress();return t.startsWith("0x")?t:"0x".concat(t)}async getProvider(){if(this.provider)return this.provider;const i=this.getMagicSDK();return this.provider=i.rpcProvider,this.provider}async getSigner(){const i=new a.u(await this.getProvider());return await i.getSigner()}async isAuthorized(){const i=this.getMagicSDK();try{return await i.user.isLoggedIn()}catch(t){return!1}}onAccountsChanged(i){0===i.length?this.emit("disconnect"):i[0]&&this.emit("change",{account:r.getAddress(i[0])})}onChainChanged(i){const t=(0,s.n)(i),n=this.isChainUnsupported(t);this.emit("change",{chain:{id:t,unsupported:n}})}onDisconnect(){this.emit("disconnect")}async disconnect(){const i=this.getMagicSDK();await i.user.logout()}}var g=new WeakMap,p=new WeakMap;class l extends u{constructor(i){var t,n;super(i),(0,e._)(this,g,{writable:!0,value:void 0}),(0,e._)(this,p,{writable:!0,value:void 0}),this.magicSdkConfiguration=i.options.magicSdkConfiguration,(0,e.a)(this,p,i.options.type),this.oauthProviders=(null===(t=i.options.oauthOptions)||void 0===t?void 0:t.providers)||[],this.oauthRedirectURI=null===(n=i.options.oauthOptions)||void 0===n?void 0:n.redirectURI}async connect(i){if(!this.magicOptions.apiKey)throw new Error("Magic API Key is not provided.");try{i.chainId&&this.initializeMagicSDK({chainId:i.chainId});const n=await this.getProvider();this.setupListeners(),this.emit("message",{type:"connecting"});const o=await this.isAuthorized();let s;try{s=await this.getChainId()}catch(t){s=0}if((0,e.a)(this,g,s),o)return{provider:n,chain:{id:s,unsupported:!1},account:await this.getAccount()};const a=this.getMagicSDK();if("connect"===(0,e.b)(this,p))("email"in i||"phoneNumber"in i)&&console.warn("Passing email or phoneNumber is not required for Magic Connect"),await a.wallet.connectWithUI();else if("oauthProvider"in i)await a.oauth.loginWithRedirect({provider:i.oauthProvider,redirectURI:this.oauthRedirectURI||window.location.href}),await new Promise((i=>{setTimeout(i,1e4)}));else if("email"in i)await a.auth.loginWithMagicLink({email:i.email,showUI:!0});else{if(!("phoneNumber"in i))throw new Error("Invalid options: Either provide and email, phoneNumber or oauthProvider when using Magic Auth");await a.auth.loginWithSMS({phoneNumber:i.phoneNumber})}const r=await this.getSigner();let c=await r.getAddress();return c.startsWith("0x")||(c="0x".concat(c)),{account:c,chain:{id:s,unsupported:!1},provider:n}}catch(n){throw console.error(n),new Error("Something went wrong")}}async getChainId(){var i;const t=null===(i=this.magicSdkConfiguration)||void 0===i?void 0:i.network;if("object"===typeof t){const i=t.chainId;if(i)return(0,s.n)(i)}throw new Error("Chain ID is not defined")}initializeMagicSDK(){let{chainId:i}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const t={...this.magicSdkConfiguration,extensions:[new c.md]};if(i){const n=this.chains.find((t=>t.chainId===i));n&&(t.network={rpcUrl:n.rpc[0]||"",chainId:n.chainId})}return this.magicSDK=new h.MT(this.magicOptions.apiKey,t),this.provider=this.magicSDK.rpcProvider,this.magicSDK}getMagicSDK(){return this.magicSDK?this.magicSDK:this.initializeMagicSDK()}async setupListeners(){const i=await this.getProvider();i.on("accountsChanged",this.onAccountsChanged),i.on("chainChanged",this.onChainChanged),i.on("disconnect",this.onDisconnect)}async switchChain(i){const t=this.chains.find((t=>t.chainId===i));if(!t)throw new Error("Chain not found");return(0,e.b)(this,g)!==i&&this.initializeMagicSDK({chainId:i}),t}}}}]);
//# sourceMappingURL=648.49d65c94.chunk.js.map