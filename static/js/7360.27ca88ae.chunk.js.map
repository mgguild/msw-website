{"version":3,"file":"static/js/7360.27ca88ae.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/constants-e71c81af.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js"],"sourcesContent":["// excerpt from https://docs.gnosis-safe.io/backend/available-services\nconst CHAIN_ID_TO_GNOSIS_SERVER_URL = {\n  // mainnet\n  1: \"https://safe-transaction-mainnet.safe.global\",\n  // goerli\n  5: \"https://safe-transaction-goerli.safe.global\",\n  // optimism\n  10: \"https://safe-transaction-optimism.safe.global\",\n  // bsc\n  56: \"https://safe-transaction-bsc.safe.global\",\n  // gnosis\n  100: \"https://safe-transaction-gnosis-chain.safe.global\",\n  // polygon\n  137: \"https://safe-transaction-polygon.safe.global\",\n  // avalanche\n  43114: \"https://safe-transaction-avalanche.safe.global\",\n  // arbitrum\n  42161: \"https://safe-transaction-arbitrum.safe.global\",\n  // celo\n  42220: \"https://safe-transaction-celo.safe.global\",\n  // base goerli\n  84531: \"https://safe-transaction-base-testnet.safe.global\",\n  // aurora\n  1313161554: \"https://safe-transaction-aurora.safe.global\"\n};\n\n/**\n * @internal\n */\nconst SafeSupportedChainsSet = /* @__PURE__ */(() => new Set(Object.keys(CHAIN_ID_TO_GNOSIS_SERVER_URL).map(Number)))();\n\nexport { CHAIN_ID_TO_GNOSIS_SERVER_URL as C, SafeSupportedChainsSet as S };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { ethers } from 'ethers';\nimport { SafeService, SafeEthersSigner } from '@safe-global/safe-ethers-adapters';\nimport safeCoreSdk, { EthersAdapter } from '@safe-global/protocol-kit';\nimport { C as CHAIN_ID_TO_GNOSIS_SERVER_URL } from '../../../../dist/constants-e71c81af.browser.esm.js';\nimport 'eventemitter3';\n\nconst CHAIN_ID_TO_SIGN_MESSAGE_LIB_ADDRESS = {\n  // mainnet\n  1: \"0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2\",\n  // polygon\n  137: \"0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2\",\n  // bsc\n  56: \"0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2\",\n  // arbitrum\n  42161: \"0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2\",\n  // aurora\n  1313161554: \"0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2\",\n  // avalanche\n  43114: \"0x98FFBBF51bb33A056B08ddf711f289936AafF717\",\n  // optimism\n  10: \"0x98FFBBF51bb33A056B08ddf711f289936AafF717\",\n  // base goerli\n  84531: \"0x98FFBBF51bb33A056B08ddf711f289936AafF717\",\n  // celo\n  42220: \"0x98FFBBF51bb33A056B08ddf711f289936AafF717\",\n  // goerli\n  5: \"0x58FCe385Ed16beB4BCE49c8DF34c7d6975807520\",\n  // gnosis chain\n  100: \"0x58FCe385Ed16beB4BCE49c8DF34c7d6975807520\"\n};\nconst SIGN_MESSAGE_LIB_ABI = [{\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"bytes32\",\n    name: \"msgHash\",\n    type: \"bytes32\"\n  }],\n  name: \"SignMsg\",\n  type: \"event\"\n}, {\n  inputs: [{\n    internalType: \"bytes\",\n    name: \"message\",\n    type: \"bytes\"\n  }],\n  name: \"getMessageHash\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"bytes\",\n    name: \"_data\",\n    type: \"bytes\"\n  }],\n  name: \"signMessage\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}];\nconst __IS_SERVER__ = \"object\" === \"undefined\";\nclass SafeConnector extends Connector {\n  // config\n\n  // private options: SafeOptions;\n\n  constructor() {\n    super();\n    _defineProperty(this, \"supportedChains\", SafeConnector.supportedChains);\n    _defineProperty(this, \"id\", \"safe-wallet\");\n    _defineProperty(this, \"ready\", !__IS_SERVER__);\n    _defineProperty(this, \"name\", \"Safe Wallet\");\n    {\n      this.ready = true;\n    }\n  }\n  async connect(args) {\n    if (!(args.chain.chainId in CHAIN_ID_TO_GNOSIS_SERVER_URL)) {\n      throw new Error(\"Chain not supported by Safe\");\n    }\n    this.safeSigner = await this.createSafeSigner(args);\n    return await this.getAddress();\n  }\n  async createSafeSigner(params) {\n    this.personalWallet = params.personalWallet;\n    const signer = await params.personalWallet.getSigner();\n    const safeAddress = params.safeAddress;\n    const safeChainId = params.chain.chainId;\n    if (!signer) {\n      throw new Error(\"cannot create Gnosis Safe signer without a personal signer\");\n    }\n    const signerChainId = await signer.getChainId();\n    if (signerChainId !== safeChainId) {\n      throw new Error(\"chainId of personal signer has to match safe chainId\");\n    }\n    if (!safeAddress) {\n      throw new Error(\"safeAddress is required\");\n    }\n    if (!safeChainId) {\n      throw new Error(\"safeChainId is required\");\n    }\n    const serverUrl = CHAIN_ID_TO_GNOSIS_SERVER_URL[safeChainId];\n    const signMessageLibAddress = CHAIN_ID_TO_SIGN_MESSAGE_LIB_ADDRESS[safeChainId];\n    if (!serverUrl || !signMessageLibAddress) {\n      throw new Error(\"Chain not supported\");\n    }\n    const ethAdapter = new EthersAdapter({\n      ethers,\n      signerOrProvider: signer\n    });\n    const safe = await safeCoreSdk.create({\n      ethAdapter: ethAdapter,\n      safeAddress\n    });\n    const service = new SafeService(serverUrl);\n    const safeSigner = new SafeEthersSigner(safe, service, signer.provider);\n    safeSigner.signMessage = async message => {\n      // Encode the request to the signMessage function of the SafeMessageLib\n      const contract = new ethers.BaseContract(signMessageLibAddress, SIGN_MESSAGE_LIB_ABI);\n      const data = contract.interface.encodeFunctionData(\"signMessage\", [ethers.utils.hashMessage(message)]);\n      const to = signMessageLibAddress;\n      const value = \"0\";\n      const operation = 1; // 1 indicates a delegatecall\n      const safeTxGas = 50000;\n      const baseGas = 50000;\n      const gasPrice = 0;\n      const gasToken = ethers.constants.AddressZero;\n      const refundReceiver = ethers.constants.AddressZero;\n\n      // Create the safe transaction to approve the signature\n      const safeTx = await safe.createTransaction({\n        safeTransactionData: {\n          to,\n          value,\n          operation,\n          data,\n          baseGas,\n          safeTxGas,\n          gasPrice,\n          gasToken,\n          refundReceiver\n        }\n      });\n\n      // Sign and propose the safe transaction\n      const safeTxHash = await safe.getTransactionHash(safeTx);\n      const safeSignature = await safe.signTransactionHash(safeTxHash);\n      await service.proposeTx(await safe.getAddress(), safeTxHash, safeTx, safeSignature);\n\n      // Poll while we wait for the safe transaction to reach minimum confirmations\n      while (true) {\n        try {\n          const txDetails = await service.getSafeTxDetails(safeTxHash);\n          if (txDetails.transactionHash) {\n            await signer.provider?.waitForTransaction(txDetails.transactionHash);\n            break;\n          }\n        } catch (e) {}\n        await new Promise(resolve => setTimeout(resolve, 5000));\n      }\n\n      // For on-chain signatures, safe expects just \"0x\" as the signature\n      return \"0x\";\n    };\n\n    // set the personal signer as \"previous connector\" so that we can re-connect to it later when disconnecting\n    this.previousConnector = params.personalWallet;\n    return safeSigner;\n  }\n  async disconnect() {\n    this.safeSigner = undefined;\n    this.previousConnector = undefined;\n    return undefined;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return await signer.getAddress();\n  }\n  async getChainId() {\n    return (await this.getSigner()).getChainId();\n  }\n  async getProvider() {\n    const provider = (await this.getSigner()).provider;\n    if (!provider) {\n      throw new Error(\"No provider available\");\n    }\n    return provider;\n  }\n  async getSigner() {\n    if (!this.safeSigner) {\n      throw new Error(\"not connected - please call connect() first\");\n    }\n    return this.safeSigner;\n  }\n  async isConnected() {\n    try {\n      const account = await this.getAddress();\n      return !!account;\n    } catch (e) {\n      return false;\n    }\n  }\n  onAccountsChanged(accounts) {\n    if (accounts.length === 0) {\n      this.emit(\"disconnect\");\n    } else {\n      if (accounts[0]) {\n        this.emit(\"change\", {\n          account: ethers.utils.getAddress(accounts[0])\n        });\n      }\n    }\n  }\n  onDisconnect() {\n    this.emit(\"disconnect\");\n  }\n  switchChain() {\n    throw new Error(\"Safe connector does not support switching chains\");\n  }\n  updateChains() {}\n  async setupListeners() {}\n}\n_defineProperty(SafeConnector, \"supportedChains\", /* @__PURE__ */(() => Object.keys(CHAIN_ID_TO_GNOSIS_SERVER_URL))());\n\nexport { SafeConnector };\n"],"names":["CHAIN_ID_TO_GNOSIS_SERVER_URL","CHAIN_ID_TO_SIGN_MESSAGE_LIB_ADDRESS","SIGN_MESSAGE_LIB_ABI","anonymous","inputs","indexed","internalType","name","type","outputs","stateMutability","SafeConnector","Connector","constructor","super","_defineProperty","this","supportedChains","ready","connect","args","chain","chainId","Error","safeSigner","createSafeSigner","getAddress","params","personalWallet","signer","getSigner","safeAddress","safeChainId","getChainId","serverUrl","signMessageLibAddress","ethAdapter","EthersAdapter","ethers","signerOrProvider","safe","safeCoreSdk","service","SafeService","SafeEthersSigner","provider","signMessage","async","data","interface","encodeFunctionData","message","to","gasToken","refundReceiver","safeTx","createTransaction","safeTransactionData","value","operation","baseGas","safeTxGas","gasPrice","safeTxHash","getTransactionHash","safeSignature","signTransactionHash","proposeTx","txDetails","getSafeTxDetails","transactionHash","_signer$provider","waitForTransaction","e","Promise","resolve","setTimeout","previousConnector","disconnect","undefined","getProvider","isConnected","onAccountsChanged","accounts","length","emit","account","onDisconnect","switchChain","updateChains","setupListeners","Object","keys"],"sourceRoot":""}