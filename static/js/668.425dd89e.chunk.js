"use strict";(self.webpackChunkMetaSaga_Warriors=self.webpackChunkMetaSaga_Warriors||[]).push([[668],{30668:(t,e,s)=>{s.d(e,{MetaMaskConnector:()=>u});var i=s(22516),n=s(80584),c=s(86800),o=s(62704),a=s(90952),r=s(70036),h=s(5288),d=(s(83440),new WeakMap);class u extends a.InjectedConnector{constructor(t){const e={...{name:"MetaMask",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:h.g},...t.options};super({chains:t.chains,options:e,connectorStorage:t.connectorStorage}),(0,n._)(this,"id",o.w.metamask),(0,i._)(this,d,{writable:!0,value:void 0}),(0,i.a)(this,d,e.UNSTABLE_shimOnConnectSelectAccount)}async connect(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{var e,s;const a=await this.getProvider();if(!a)throw new c.a;this.setupListeners(),this.emit("message",{type:"connecting"});let h=null;if((0,i.b)(this,d)&&null!==(e=this.options)&&void 0!==e&&e.shimDisconnect&&!Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))){h=await this.getAccount().catch((()=>null));if(!!h)try{await a.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(n){if(this.isUserRejectedRequestError(n))throw new c.U(n)}}if(!h){const t=await a.request({method:"eth_requestAccounts"});h=r.getAddress(t[0])}let u=await this.getChainId(),w=this.isChainUnsupported(u);if(t.chainId&&u!==t.chainId)try{await this.switchChain(t.chainId),u=t.chainId,w=this.isChainUnsupported(t.chainId)}catch(o){console.error("Could not switch to chain id : ".concat(t.chainId),o)}null!==(s=this.options)&&void 0!==s&&s.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const l={chain:{id:u,unsupported:w},provider:a,account:h};return this.emit("connect",l),l}catch(n){if(this.isUserRejectedRequestError(n))throw new c.U(n);if(-32002===n.code)throw new c.R(n);throw n}}async switchAccount(){const t=await this.getProvider();await t.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}}}}]);
//# sourceMappingURL=668.425dd89e.chunk.js.map