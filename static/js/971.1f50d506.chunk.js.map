{"version":3,"file":"static/js/971.1f50d506.chunk.js","mappings":"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","sources":["../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/curves/src/abstract/hash-to-curve.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/secp256k1.ts","../node_modules/@noble/curves/src/_shortw_utils.ts"],"sourcesContent":["import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport { bytesToNumberBE, CHash, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\nfunction validateDST(dst: UnicodeOrBytes): Uint8Array {\n  if (dst instanceof Uint8Array) return dst;\n  if (typeof dst === 'string') return utf8ToBytes(dst);\n  throw new Error('DST must be Uint8Array or string');\n}\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction isBytes(item: unknown): void {\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\n}\nfunction isNum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  isBytes(msg);\n  isNum(count);\n  const DST = validateDST(_DST);\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n"],"names":["SHA2","_Hash","_inherits","_super","_createSuper","blockLen","outputLen","padOffset","isLE","_this","_classCallCheck","call","finished","length","pos","destroyed","buffer","Uint8Array","view","createView","_createClass","key","value","data","exists","this","len","toBytes","take","Math","min","set","subarray","process","dataView","roundClean","out","output","fill","i","byteOffset","setBigUint64","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","oview","Error","outLen","state","get","digestInto","res","slice","destroy","to","_to","constructor","apply","_toConsumableArray","Hash","Maj","a","b","c","SHA256_K","Uint32Array","IV","SHA256_W","SHA256","_SHA","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","sha256","wrapConstructor","_0n","_1n","_2n","_3n","_4n","_5n","_8n","mod","result","pow","num","power","modulo","pow2","x","invert","number","concat","y","u","v","q","r","m","n","FpSqrt","P","p1div4","Fp","root","eql","sqr","c1","n2","mul","nv","sub","ONE","Q","S","Z","legendreC","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","validateField","field","opts","reduce","map","val","ORDER","MASK","BYTES","BITS","validateObject","nLength","nBitLength","_nBitLength","undefined","toString","nByteLength","ceil","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","validateBasic","curve","Gx","Gy","Object","freeze","_objectSpread","p","b2n","ut","h2b","DER","Err","_Error","DERErr","arguments","_wrapNativeSuper","_parseInt","d","toSig","hex","_DER$_parseInt","sBytes","_DER$_parseInt2","s","hexFromSig","sig","parseInt","shl","rhl","sl","rl","weierstrassPoints","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","from","bytes","tail","weierstrassEquation","x2","x3","add","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","lengths","includes","padStart","ensureBytes","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","isValid","windowSize","_WINDOW_SIZE","delete","is0","_this$toAffine","left","right","isOdd","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","negate","equals","wnaf","wNAFCached","comp","toInv","invertBatch","fromAffine","I","unsafeLadder","_endo$splitScalar","k1neg","k1","k2neg","k2","k1p","k2p","double","scalar","fake","_endo$splitScalar2","_this$wNAF","wNAF","f1p","f","_this$wNAF2","f2p","constTimeNegate","_this$wNAF3","normalizeZ","BASE","multiply","multiplyUnsafe","sum","iz","z","inv","ax","ay","zz","cofactor","isCompressed","assertValidity","toRawBytes","_ref","points","privateKey","_bits","bits","condition","item","W","windows","elm","precomputeWindow","_opts","base","window","push","precomputes","_opts2","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","hash","hmac","randomBytes","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","_weierstrassPoints","cat","hasEvenY","head","y2","sqrt","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","msgHash","rec","radj","prefix","R","fromHex","ir","u1","u2","multiplyAndAddUnsafe","hasHighS","toDERHex","toCompactHex","_DER$toSig","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","bytesToNumberBE","bytesToNumberLE","numberToBytesLE","numberToBytesBE","precompute","_setWindowSize","isProbPub","arr","str","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","k","prehash","ent","extraEntropy","h1int","seedArgs","e","seed","k2sig","kBytes","ik","normS","normalizeS","defaultVerOpts","getPublicKey","fromPrivateKey","getSharedSecret","privateA","publicB","sign","privKey","_prepSig","drbg","verify","signature","publicKey","_Point$BASE$multiplyA","sg","_sig","fromDER","derError","fromCompact","message","_sig2","is","mapToCurveSimpleSWU","sqrtRatio","o","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","c7","tv1","tv2","tv3","tv5","tv4","isQR","cmov","tvv5","e1","y1","SWUFpSqrtRatio","tv6","_sqrtRatio","div","os2ip","i2osp","Array","strxor","isBytes","isNum","isSafeInteger","hash_to_field","msg","count","options","DST","expand","_DST","prb","dst","utf8ToBytes","validateDST","log2p","L","len_in_bytes","lenInBytes","concatBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","expand_message_xmd","dkLen","create","update","digest","expand_message_xof","j","elm_offset","tv","HMAC","_key","assertHash","iHash","pad","oHash","buf","assertExists","assertBytes","getPrototypeOf","_cloneInto","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","bitLen","redef","_nLength","sqrtP","bitMask","lhs","rhs","FpPow","sqrN","addN","subN","mulN","lst","nums","tmp","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","Field","secp256k1","defHash","_len","msgs","getHash","createCurve","a1","b1","a2","POW_2_128","fe","TAGGED_HASH_PREFIXES","taggedHash","tag","tagP","tagH","charCodeAt","messages","pointToBytes","numTo32b","modP","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","_len2","_key2","schnorrGetPublicKey","schnorrSign","auxRand","_schnorrGetExtPubKey","t","rand","k_","_schnorrGetExtPubKey2","rx","schnorrVerify","pub","schnorr","isoMap","COEFF","reverse","_COEFF$map","_COEFF$map2","_slicedToArray","xNum","xDen","yNum","yDen","isogenyMap","mapSWU","htf","mapToCurve","def","hashToCurve","u0","encodeToCurve","encodeDST","createHasher","scalars","_mapSWU"],"sourceRoot":""}